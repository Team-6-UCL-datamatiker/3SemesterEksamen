@page "/chat"
@rendermode InteractiveWebAssembly
@using GotorzProjectMain.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims


@inject NavigationManager Navigation

@implements IAsyncDisposable

@attribute [Authorize]

<PageTitle>Chat</PageTitle>

@if (!_isReady)
{
	<!-- Show loading spinner while chat is initializing -->
	<div class="d-flex justify-content-center align-items-center" style="height: 60vh;">
		<div class="d-flex align-items-center gap-2">
			<span>Loading...</span>
			<div class="spinner-border text-primary" role="status"></div>
		</div>
	</div>
}
else
{
	<!-- Chat interface -->
	<div class="container py-4">
		<div class="row justify-content-center">
			<div class="col-12 col-md-8">
				<div class="card shadow-sm">
					<!-- Header -->
					<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Global Chat</h5>
						<span class="badge bg-light text-primary">@messages.Count</span>
					</div>

					<!-- Message list -->
					<div class="card-body p-0">
						<ul class="list-group list-group-flush overflow-auto" style="max-height: 400px;">
							@foreach (var msg in messages)
							{
								<li class="list-group-item">@msg</li>
							}
						</ul>
					</div>

					<!-- Input form -->
					<div class="card-footer bg-light">
						<div class="input-group">
							<input @bind="messageInput"
								   @bind:event="oninput"
								   class="form-control"
								   placeholder="Skriv en besked…"
								   @onkeypress='@(async (KeyboardEventArgs e) => {
           if (e.Key == "Enter" && IsConnected)
           {
               await Send();
           }
       })' />
							<button class="btn btn-primary"
									type="button"
									@onclick="Send"
									disabled="@( !IsConnected )">
								Send
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	private HubConnection? hubConnection;
	private readonly List<string> messages = [];
	private string? username;
	private string? messageInput;
	private string? userId;
	private bool _isReady = false;

	// Used to access the current logged-in user's authentication state
	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;


	protected override async Task OnInitializedAsync()
	{
		// Get the current user
		var user = (await AuthenticationStateTask).User;

		username = user.FindFirst(ClaimTypes.GivenName)?.Value
							?? "‹unknown›";
		userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
							?? throw new InvalidOperationException("User not authenticated");

		// Set up SignalR connection
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
			.Build();

		// Register a client-side handler for the "ReceiveMessage" method invoked by the server.
		// This acts like an event listener triggered by the server via RPC.
		hubConnection.On<string, string, DateTime>("ReceiveMessage", (username, message, timestamp) =>
		{
			var encodedMsg = $"{username} [{timestamp:HH:mm}]: {message}";
			messages.Add(encodedMsg);
			InvokeAsync(StateHasChanged);
		});

		await hubConnection.StartAsync();

		// Load chat history
		var history = await hubConnection.InvokeAsync<List<ChatMessage>>("GetRecentMessages", 50);
		foreach (var msg in history)
		{
			messages.Add($"{msg.Username} [{msg.Timestamp:HH:mm}]: {msg.Message}");
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		// Once page is first rendered, mark as ready
		if (firstRender)
		{
			_isReady = true;
			StateHasChanged(); // force re-render
		}
	}

	private async Task Send()
	{
		// Send message via SignalR hub
		if (hubConnection is not null)
		{
			await hubConnection.SendAsync("SendMessage", messageInput, userId, username);
			messageInput = string.Empty;
		}
	}

	// Connection status helper
	public bool IsConnected =>
		hubConnection?.State == HubConnectionState.Connected;

	// Clean up SignalR connection on page dispose
	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}