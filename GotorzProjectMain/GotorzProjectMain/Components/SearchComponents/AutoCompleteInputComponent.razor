@using GotorzProjectMain.Services.APIs
@using Microsoft.AspNetCore.Components.Web

@inject ICityLookupService CityLookupService

<div class="position-relative">
	<label for="@Id">@Label</label><br />
	<input id="@Id"
		   class="form-control"
		   placeholder="@Placeholder"
		   autocomplete="off"
		   @bind="Value"
		   @oninput="OnInput"
		   @onkeydown="HandleKeyPress" />

	@if (Suggestions.Any() && !string.IsNullOrWhiteSpace(Value))
	{
		<!-- Show dropdown only if there are suggestions and input is not empty -->
		<ul class="list-group position-absolute mt-1 w-100" style="z-index:1000;">
			@foreach (var suggestion in Suggestions)
			{
				<!-- Render each suggestion as a selectable item -->
				<li class="list-group-item list-group-item-action"
					@onclick="() => Select(suggestion)">
					@suggestion
				</li>
			}
		</ul>
	}
</div>

@code {
	[Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
	[Parameter] public string Label { get; set; } = "City";
	[Parameter] public string Value { get; set; } = string.Empty;
	// Event callback to notify parent of value changes
	[Parameter] public EventCallback<string> ValueChanged { get; set; }
	[Parameter] public Func<string, Task<List<string>>>? SearchSuggestions { get; set; }
	// Function provided by the parent to fetch suggestion list
	[Parameter] public Action? SelectionMethod { get; set; }
	[Parameter] public string Placeholder { get; set; } = "Type a city";

	private List<string> Suggestions = new();

	// Debounce token to prevent too-frequent searches
	private CancellationTokenSource? _debounceCts;

	// Handles user input events, debounces, and fetches suggestions via provided delegate.
	private async Task OnInput(ChangeEventArgs e)
	{
		// Update the input value from the event
		Value = e?.Value?.ToString() ?? "";

		// Notify parent component of the updated value
		await ValueChanged.InvokeAsync(Value);

		// Cancel any previous debounce delay
		_debounceCts?.Cancel();
		_debounceCts?.Dispose();
		_debounceCts = new();
		try
		{
			// Wait for 300ms before searching for suggestions
			await Task.Delay(300, _debounceCts.Token);
			if (!string.IsNullOrWhiteSpace(Value))
			{
				if (SearchSuggestions is null)
				{
					// Use default city lookup if no external function provided
					Suggestions = await Task.FromResult(CityLookupService.SearchContains(Value, 10).ToList());

				}
				else
				{
					// Use custom search (amenities)
					Suggestions = await SearchSuggestions(Value);
				}
			}
		}
		catch (TaskCanceledException)
		{
			// Ignore if debounce was canceled
		}
	}

	// Handles Enter key by selecting the first suggestion.
	private async Task HandleKeyPress(KeyboardEventArgs e)
	{
		if (e.Key == "Enter" && Suggestions.Any())
		{
			await Select(Suggestions.First());
		}
	}

	// Clears suggestions and notifies parent of selected suggestion.
	private async Task Select(string suggestion)
	{
		await ValueChanged.InvokeAsync(suggestion);
		if (SelectionMethod is not null)
		{
			SelectionMethod();
		}
		Suggestions.Clear();
	}
}
