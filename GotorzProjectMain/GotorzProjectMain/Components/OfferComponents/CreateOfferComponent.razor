
@using AutoMapper
@using GotorzProjectMain.Components
@using GotorzProjectMain.Components.SearchComponents
@using GotorzProjectMain.Models
@using GotorzProjectMain.Data
@inject NavigationManager NavigationManager
@inject ApplicationDbContext Context
@inject IMapper Mapper
@inject ILogger<CreateOfferComponent> Logger

@rendermode InteractiveServer


<details>
    <summary class="summary-heading">Flight Search 1</summary><br />
    <SearchFlightComponent ComponentId="1" OnFlightSelected="HandleFlightSelected" />
</details>
<details>
    <summary class="summary-heading">Flight Search 2</summary><br />
    <SearchFlightComponent ComponentId="2" OnFlightSelected="HandleFlightSelected" />
</details>
<details>
    <summary class="summary-heading">Hotel Search</summary><br />
    <SearchHotelComponent OnHotelSelected="HandleHotelSelected" />
</details>


<button @onclick="CreateVacationOffer" disabled="@(OutwardRoute == null || ReturnRoute == null || HotelBooking == null)" class="btn btn-primary" style="padding: 0.4rem 1rem; padding-top: 0.6rem">Create Offer</button>

@code
{
    [Parameter]
    public VacationRequest VacationRequest { get; set; }

    [Parameter]
    public Employee Employee { get; set; }


    VacationOffer vacationOffer = new VacationOffer();

    FlightBooking OutwardFlightBooking { get; set; }
    FlightBooking ReturnFlightBooking { get; set; }

    HotelBooking? HotelBooking { get; set; }

    FlightRoute? OutwardRoute { get; set; }
    FlightRoute? ReturnRoute { get; set; }

    public void CreateVacationOffer()
    {
        vacationOffer.EmployeeEmail = Employee.User.Email;
        vacationOffer.Misc = "Test";
        vacationOffer.VacationRequestId = VacationRequest.VacationRequestId;
        vacationOffer.TotalPrice = Convert.ToSingle(OutwardRoute.TotalPrice + ReturnRoute.TotalPrice) + HotelBooking.Price;
        vacationOffer.StartDate = OutwardRoute.Legs.First().DepartureTime;
        vacationOffer.EndDate = ReturnRoute.Legs.Last().ArrivalTime;
        vacationOffer.OfferStatus = OfferStatus.Waiting;
        vacationOffer.ExpirationDate = DateTime.Now.AddDays(10);
        Context.VacationOffers.Add(vacationOffer);
        Context.SaveChanges();

        if (OutwardRoute != null)
        {
            OutwardFlightBooking = new FlightBooking
                {
                    FlightRoute = OutwardRoute,
                    Airline = string.Join(", ", OutwardRoute.Legs.Select(leg => leg.Airline)),
                    DepartureTime = OutwardRoute.Legs.First().DepartureTime,
                    VacationOfferId = vacationOffer.VacationOfferId,
                    DepartureAirport = OutwardRoute.Legs.First().DepartureAirportName,
                    ArrivalAirport = OutwardRoute.Legs.Last().ArrivalAirportName
                };
            Context.FlightBookings.Add(OutwardFlightBooking);

            Context.FlightRoutes.Add(OutwardRoute);

            foreach (var flight in OutwardRoute.Legs)
            {
                flight.FlightRouteId = OutwardRoute.RouteId;
                Context.Flights.Add(flight);
            }
            foreach (var layover in OutwardRoute.Layovers)
            {
                layover.FlightRouteId = OutwardRoute.RouteId;
                Context.Layovers.Add(layover);
            }
        }

        if (ReturnRoute != null)
        {
            ReturnFlightBooking = new FlightBooking
                {
                    FlightRoute = ReturnRoute,
                    Airline = string.Join(", ", ReturnRoute.Legs.Select(leg => leg.Airline)),
                    DepartureTime = ReturnRoute.Legs.First().DepartureTime,
                    VacationOfferId = vacationOffer.VacationOfferId,
                    DepartureAirport = ReturnRoute.Legs.First().DepartureAirportName,
                    ArrivalAirport = ReturnRoute.Legs.Last().ArrivalAirportName
                };
            Context.FlightBookings.Add(ReturnFlightBooking);

            Context.FlightRoutes.Add(ReturnRoute);

            foreach (var flight in ReturnRoute.Legs)
            {
                flight.FlightRouteId = ReturnRoute.RouteId;
                Context.Flights.Add(flight);
            }
            foreach (var layover in ReturnRoute.Layovers)
            {
                layover.FlightRouteId = ReturnRoute.RouteId;
                Context.Layovers.Add(layover);
            }
        }

        if (HotelBooking != null)
        {
            HotelBooking.VacationOfferId = vacationOffer.VacationOfferId;
            Context.HotelBookings.Add(HotelBooking);
        }
        Context.SaveChanges();
        NavigationManager.NavigateTo("/vacationrequests");
    }

    private void HandleFlightSelected((string ComponentId, FlightRoute Route) selection)
    {
        if (selection.ComponentId == "1")
        {
            OutwardRoute = selection.Route;
        }
        else if (selection.ComponentId == "2")
        {
            ReturnRoute = selection.Route;
        }
    }

    private void HandleHotelSelected(Hotel selectedHotel)
    {
        try
        {
            HotelBooking = Mapper.Map<HotelBooking>(selectedHotel);
        }
        catch (Exception ex)
        {
            Logger.LogError($"Mapping error: {ex}");
        }
    }


}
