@page "/customers/details"
@using GotorzProjectMain.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using GotorzProjectMain.Models
<!-- Injecting the Userservice so it can be used to find user data -->
@inject NavigationManager NavigationManager
@inject Services.IExtendedUserService UserService

@attribute [Authorize(Policy = "Admin")]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Customer</h2>
    <hr />
    @if (customer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Username</dt>
            <dd class="col-sm-10">@customer.CustomUserName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">First Name</dt>
            <dd class="col-sm-10">@customer.User.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Last Name</dt>
            <dd class="col-sm-10">@customer.User.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@customer.User.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@customer.User.PhoneNumber</dd>
        </dl>
        <div>
            <a href="@($"/customers/edit?id={customer.Id}")">Edit</a> |
            <a href="@($"/customers")">Back to List</a>
        </div>
    }
</div>

@code {
    private Customer? customer;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        customer = await UserService.GetCustomerByIdAsync(Id);

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
