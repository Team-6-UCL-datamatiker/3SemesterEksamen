@page "/Account/RegisterCustomer"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using GotorzProjectMain.Models
@using GotorzProjectMain.Models.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GotorzProjectMain.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<RegisterCustomer> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext


<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
	<div class="col-md-4">
		<StatusMessage Message="@Message" />
		<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
			<DataAnnotationsValidator />
			<h2>Create a new account.</h2>
			<hr />
			<ValidationSummary class="text-danger" role="alert" />
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="john" />
				<label for="firstname">First Name</label>
				<ValidationMessage For="() => Input.FirstName" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.LastName" class="form-control" autocomplete="lastname" aria-required="true" placeholder="doe" />
				<label for="lastname">Last Name</label>
				<ValidationMessage For="() => Input.LastName" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
				<label for="email">Email</label>
				<ValidationMessage For="() => Input.Email" class="text-danger" />
			</div>

			<!-- This code block adds a field with an indication of whether or not the written username is taken. -->
			<!--Currently doesn't work' -->
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.CustomUserName"
						   class="form-control"
						   @* @oninput="CheckUsernameAvailability" *@
						   autocomplete="username"
						   aria-required="true"
						   placeholder="Username" />
				<label for="username">Username</label>
				<ValidationMessage For="() => Input.CustomUserName" class="text-danger" />
				@* <div>
					@if (!string.IsNullOrEmpty(UsernameCheckMessage))
					{
						<span>@UsernameCheckMessage</span>
					}
				</div> *@
			</div>

			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="password">Password</label>
				<ValidationMessage For="() => Input.Password" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="confirm-password">Confirm Password</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>

			<div class="form-floating mb-3">
				<InputText type="phone" @bind-Value="Input.Phone" class="form-control" autocomplete="phone" aria-required="true" placeholder="phone number" />
				<label for="phone">Phone Number (optional)</label>
				<ValidationMessage For="() => Input.Phone" class="text-danger" />
			</div>

			<button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
		</EditForm>
	</div>
	@* <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div> *@
</div>

@code {
	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm]
	private CustomerInput Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

	public async Task RegisterUser(EditContext editContext)
	{
		var user = CreateUser();

		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		var emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
		var result = await UserManager.CreateAsync(user, Input.Password);

		//this is where custom fields are set to update the user, all fields that arent covered by the createAsync method
		user.FirstName = Input.FirstName;
		user.LastName = Input.LastName;
		user.PhoneNumber = Input.Phone;
		await UserManager.UpdateAsync(user);

		if (!result.Succeeded)
		{
			identityErrors = result.Errors;
			return;
		}


		// Assign Customer role to the new user
		var roleResult = await UserManager.AddToRoleAsync(user, "Customer");
		
		if (!roleResult.Succeeded)
		{
			identityErrors = roleResult.Errors;
			return;
		}

		// Also adds the user to the customer table
		var customer = new Customer
			{
				Id = user.Id,
				CustomUserName = Input.CustomUserName
			};

		DbContext.Customers.Add(customer);

		await DbContext.SaveChangesAsync();

		Logger.LogInformation("User created a new account with password.");

		var userId = await UserManager.GetUserIdAsync(user);
		var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = NavigationManager.GetUriWithQueryParameters(
			NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
			new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

		if (UserManager.Options.SignIn.RequireConfirmedAccount)
		{
			RedirectManager.RedirectTo(
				"Account/RegisterConfirmation",
				new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
		}

		await SignInManager.SignInAsync(user, isPersistent: false);
		RedirectManager.RedirectTo(ReturnUrl);
	}

	private ApplicationUser CreateUser()
	{
		try
		{
			return Activator.CreateInstance<ApplicationUser>();
		}
		catch
		{
			throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
				$"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
		}
	}

	private IUserEmailStore<ApplicationUser> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}
		return (IUserEmailStore<ApplicationUser>)UserStore;
	}

	// A method to check if the username is already taken

	// private string UsernameCheckMessage { get; set; } = "";


	//This method is called when the user types in the username field, but currently doesn't work
	// private async Task CheckUsernameAvailability(ChangeEventArgs e)
	// {
	// 	var username = Input.CustomUserName;

	// 	if (!string.IsNullOrWhiteSpace(username))
	// 	{
	// 		var existingUser = await UserManager.FindByNameAsync(username);

	// 		if (existingUser != null)
	// 		{
	// 			UsernameCheckMessage = "❌ Username is already taken.";
	// 		}
	// 		else
	// 		{
	// 			UsernameCheckMessage = "✅ Username is available.";
	// 		}
	// 	}
	// 	else
	// 	{
	// 		UsernameCheckMessage = "";
	// 	}
	// }
}
