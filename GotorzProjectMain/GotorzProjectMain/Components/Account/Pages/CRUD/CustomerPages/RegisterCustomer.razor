@page "/Account/RegisterCustomer"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using AutoMapper
@using GotorzProjectMain.InputModels.Users.CustomerInputModels
@using GotorzProjectMain.Models
@using GotorzProjectMain.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GotorzProjectMain.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<RegisterCustomer> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext
@inject IMapper Mapper


<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
	<div class="col-md-4">
		<EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
			<DataAnnotationsValidator />
			<h2>Create a new account.</h2>
			<hr />
			<ValidationSummary class="text-danger" role="alert" />

			<div class="form-floating mb-3">
				<InputText id="first-name" @bind-Value="Input.FirstName" class="form-control" autocomplete="given-name" aria-required="true" placeholder="john" />
				<label for="first-name">First Name</label>
				<ValidationMessage For="() => Input.FirstName" class="text-danger" />
			</div>

			<div class="form-floating mb-3">
				<InputText id="last-name" @bind-Value="Input.LastName" class="form-control" autocomplete="family-name" aria-required="true" placeholder="doe" />
				<label for="last-name">Last Name</label>
				<ValidationMessage For="() => Input.LastName" class="text-danger" />
			</div>

			<div class="form-floating mb-3">
				<InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
				<label for="email">Email</label>
				<ValidationMessage For="() => Input.Email" class="text-danger" />
			</div>

			<div class="form-floating mb-3">
				<InputText id="username" @bind-Value="Input.CustomUserName" class="form-control" autocomplete="username" aria-required="true" placeholder="username" />
				<label for="username">Username</label>
				<ValidationMessage For="() => Input.CustomUserName" class="text-danger" />
			</div>

			<div class="form-floating mb-3">
				<InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="password">Password</label>
				<ValidationMessage For="() => Input.Password" class="text-danger" />
			</div>

			<div class="form-floating mb-3">
				<InputText id="confirm-password" type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="confirm-password">Confirm Password</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>

			<div class="form-floating mb-3">
				<InputText id="phone" type="phone" @bind-Value="Input.Phone" class="form-control" autocomplete="tel" aria-required="true" placeholder="phone number" />
				<label for="phone">Phone Number (optional)</label>
				<ValidationMessage For="() => Input.Phone" class="text-danger" />
			</div>

			<button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
		</EditForm>

		<StatusMessage Message="@_message" />
	</div>
	@* // <ExternalLoginPicker /> can be used to add third party authentications systems such as Google*@
</div>

@code {
	[SupplyParameterFromForm]
	private RegisterCustomerInputModel Input { get; set; } = new();
	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }
	private IEnumerable<IdentityError> _identityErrors = Enumerable.Empty<IdentityError>();
	private string? _message => !_identityErrors.Any() ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

	public async Task RegisterUser()
	{
		try
		{
			var user = new ApplicationUser();

			// UserStore = The object that actually knows how to create, read, update, delete users from your database.
			//await _userStore.SetUserNameAsync(user, input.Email, CancellationToken.None);

			// Casts userstore to an IUserEmailStore<ApplicationUser>. Meaning: it forces the underlying database / user - store thing to support email operations like setting, getting, verifying emails for users.
			var emailStore = (IUserEmailStore<ApplicationUser>)UserStore;
			await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

			// Giver identityErrors en værdi hvis metoden ikke returnerer succes. identityErrors bliver vist i browseren i så fald.
			_identityErrors = _identityErrors.Concat(await ExecuteAsync(() => UserManager.CreateAsync(user, Input.Password)));
			_identityErrors = _identityErrors.Concat(await ExecuteAsync(() => UserManager.AddToRoleAsync(user, "Customer")));

			var customer = new Customer
				{
					Id = user.Id,
					User = user
				};

			Mapper.Map(Input, customer);

			DbContext.Customers.Add(customer);
			await DbContext.SaveChangesAsync();

			// Er det her noget vi bruger?
			Logger.LogInformation($"User ({user.Id}) created a new account with password.");

			await SendConfirmationEmailAndRedirect(user);
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "An unexpected error occurred.");
			throw;
		}

	}

	private async Task SendConfirmationEmailAndRedirect(ApplicationUser user)
	{
		// Link til emailbekræftelse, tror jeg? Noget i den stil.
		var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = NavigationManager.GetUriWithQueryParameters(
			NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
			new Dictionary<string, object?> { ["userId"] = user.Id, ["code"] = code, ["returnUrl"] = ReturnUrl });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

		if (UserManager.Options.SignIn.RequireConfirmedAccount)
		{
			RedirectManager.RedirectTo(
				"Account/RegisterConfirmation",
				new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
		}

		await SignInManager.SignInAsync(user, isPersistent: false);
		RedirectManager.RedirectTo(ReturnUrl);
	}

	private async Task<IEnumerable<IdentityError>> ExecuteAsync(Func<Task<IdentityResult>> action)
	{
		var result = await action();
		return result.Succeeded ? Enumerable.Empty<IdentityError>() : result.Errors;
	}
}
