@page "/customers/edit"
@using GotorzProjectMain.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using GotorzProjectMain.Models
@inject IDbContextFactory<GotorzProjectMain.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject Services.IUserService UserService

@attribute [Authorize(Policy = "Admin")]

@rendermode InteractiveServer

<PageTitle>Edit Customer</PageTitle>

<h1>Edit Customer</h1>

<hr />
@if (customer is null || customer.User is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <!-- Had to change the EditForm to this from what it was originally -->
            <EditForm Model="customer" OnValidSubmit="UpdateCustomer" FormName="edit">
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Customer.Id" value="@customer.Id" />

                <div class="mb-3">
                    <label for="customusername" class="form-label">CustomUserName:</label>
                    <InputText id="customusername" @bind-Value="customer.CustomUserName" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => customer.CustomUserName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="firstname" class="form-label">First Name:</label>
                    <InputText id="firstname" @bind-Value="firstName" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => customer.User.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">Last Name:</label>
                    <InputText id="lastname" @bind-Value="lastName" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => customer.User.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="email" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => customer.User.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Phone:</label>
                    <InputText id="phone" @bind-Value="phoneNumber" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => customer.User.PhoneNumber" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/customers">Back to List</a>
</div>

@code {
    // This is required because of the current customer.user structure
    private string? firstName;
    private string? lastName;
    private string? email;
    private string? phoneNumber;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    [SupplyParameterFromForm]
    private Customer? customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        customer = await UserService.GetCustomerByIdAsync(Id);

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        if (customer.User != null)
        {
            firstName = customer.User.FirstName;
            lastName = customer.User.LastName;
            email = customer.User.Email;
            phoneNumber = customer.User.PhoneNumber;
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCustomer()
    {
        // Update the ApplicationUser properties
        customer.User.FirstName = firstName;
        customer.User.LastName = lastName;
        customer.User.Email = email;
        customer.User.PhoneNumber = phoneNumber;

        using var context = DbFactory.CreateDbContext();

        // Detach any existing tracked instance of ApplicationUser
        var trackedUser = context.ChangeTracker.Entries<ApplicationUser>()
            .FirstOrDefault(e => e.Entity.Id == customer.User.Id);
        if (trackedUser != null)
        {
            context.Entry(trackedUser.Entity).State = EntityState.Detached;
        }

        // Attach the Customer entity and mark it as modified
        context.Attach(customer).State = EntityState.Modified;

        try
        {
            // Save the Customer fields (CustomUserName)
            await context.SaveChangesAsync();

            // Update the related ApplicationUser fields (FirstName, LastName, Email, PhoneNumber)
            if (customer.User != null)
            {
                context.Attach(customer.User).State = EntityState.Modified;
                await context.SaveChangesAsync();
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CustomerExists(customer.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/customers");
    }

    private bool CustomerExists(string id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Customers.Any(e => e.Id == id);
    }
}
