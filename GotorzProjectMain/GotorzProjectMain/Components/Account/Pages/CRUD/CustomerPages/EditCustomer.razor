@page "/customers/edit"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "Admin")]

@using GotorzProjectMain.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using GotorzProjectMain.Models

@inject ApplicationDbContext _context
@inject NavigationManager _navigationManager
@inject UserManager<ApplicationUser> _userManager
@inject Services.IExtendedUserService _userService

<PageTitle>Edit Customer</PageTitle>

<h1>Edit Customer</h1>

<hr />
@if (Customer is null || Customer.User is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<!-- Had to change the EditForm to this from what it was originally -->
			<EditForm EditContext="_ec" OnValidSubmit="UpdateCustomer" FormName="edit">
				<DataAnnotationsValidator />
				@*                 <ValidationSummary role="alert" /> *@

				<div class="mb-3">
					<label for="username" class="form-label">CustomUserName:</label>
					<InputText id="username" @bind-Value="Input.CustomUserName" class="form-control" autocomplete="username" aria-required="true" oninput="@(async (ChangeEventArgs e) => await DebounceUsernameCheck(e))" />
					<ValidationMessage For="() => Input.CustomUserName" class="alert alert-danger mt-3" />
				</div>

				<div class="mb-3">
					<label for="first-name" class="form-label">First Name:</label>
					<InputText id="first-name" @bind-Value="Input.FirstName" class="form-control" aria-required="true" />
					<ValidationMessage For="() => Input.FirstName" class="alert alert-danger mt-3" />
				</div>

				<div class="mb-3">
					<label for="last-name" class="form-label">Last Name:</label>
					<InputText id="last-name" @bind-Value="Input.LastName" class="form-control" aria-required="true" />
					<ValidationMessage For="() => Input.LastName" class="alert alert-danger mt-3" />
				</div>

				<div class="mb-3">
					<label for="email" class="form-label">Email:</label>
					<InputText id="email" @bind-Value="Input.Email" class="form-control" aria-required="true" />
					<ValidationMessage For="() => Input.Email" class="alert alert-danger mt-3" />
				</div>

				<div class="mb-3">
					<label for="phone" class="form-label">Phone:</label>
					<InputText id="phone" @bind-Value="Input.Phone" class="form-control" aria-required="true" onblur="@(() => { if (string.IsNullOrWhiteSpace(Input.Phone)) { Input.Phone = null; _ec.Validate(); }})" />
					<ValidationMessage For="() => Input.Phone" class="alert alert-danger mt-3" />
				</div>

				<button type="submit" class="btn btn-primary">Save</button>

				@if (!string.IsNullOrWhiteSpace(_errorMessage))
				{
					<div class="alert alert-danger mt-3" role="alert">
						@_errorMessage
					</div>
				}

			</EditForm>
		</div>
	</div>
}

<div>
	<a href="/customers">Back to List</a>
</div>

@code {
	[SupplyParameterFromQuery]
	private string? Id { get; set; }
	private CustomerBaseInputModel Input { get; set; } = new();
	private string? _errorMessage;
	private Customer? Customer { get; set; }
	private EditContext? _ec;
	private string? _userNameErrorMessage;
	private CancellationTokenSource? _debounceCts;
	private string? _currentUserName;
	private ValidationMessageStore? _messageStore;
	private FieldIdentifier _inputUserNameField;

	protected override async Task OnInitializedAsync()
	{
		_ec = new EditContext(Input);
		_messageStore = new ValidationMessageStore(_ec);
		_inputUserNameField = new FieldIdentifier(Input, nameof(Input.CustomUserName));

		Customer = await UserService.GetCustomerByIdAsync(Id);

		if (Customer is null)
		{
			NavigationManager.NavigateTo("/customers");
		}
		else
		{
			Mapper.Map(Customer, Input);
		}

		_currentUserName = Input.CustomUserName.ToLower();
	}

	private async Task DebounceUsernameCheck(ChangeEventArgs e)
	{
		_messageStore.Clear(_inputUserNameField); // wipe old errors
		_debounceCts?.Cancel();
		_debounceCts = new CancellationTokenSource();

		try
		{
			if (e.Value is null || e.Value.ToString().ToLower() == _currentUserName)
			{
				return;
			}

			await Task.Delay(500, _debounceCts.Token); // 500ms debounce
			_userNameErrorMessage = await Context.Customers.AnyAsync(c => c.CustomUserName.ToLower() == e.Value.ToString().ToLower()) ? "Sorry, that username is already in use. Please try a different one." : null;

			if (_userNameErrorMessage is not null)
			{
				_messageStore.Add(_inputUserNameField, _userNameErrorMessage); // add new error
				_ec.NotifyValidationStateChanged();
			}
		}
		catch (TaskCanceledException)
		{
			// Ignore, because it means user typed again before 500ms
		}
	}

	private async Task UpdateCustomer()
	{
		try
		{
			Mapper.Map(Input, Customer);
			await Context.SaveChangesAsync();
			NavigationManager.NavigateTo("/customers");
		}
		catch (DbUpdateConcurrencyException ex)
		{
			_errorMessage = "Another user has modified this data since you started editing. Your changes were not saved. Please reload and try again.";
			Logger.LogWarning(ex, _errorMessage);
		}
		catch (Exception ex)
		{
			_errorMessage = "An unexpected error occurred. Please try again.";
			Logger.LogError(ex, _errorMessage);
		}
	}
}
