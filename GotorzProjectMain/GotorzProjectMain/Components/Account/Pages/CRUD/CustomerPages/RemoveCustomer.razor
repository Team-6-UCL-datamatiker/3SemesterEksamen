@page "/customers/delete"
@using Microsoft.EntityFrameworkCore
@using GotorzProjectMain.Models
@using Microsoft.AspNetCore.Authorization
@inject IDbContextFactory<GotorzProjectMain.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject Services.IUserService UserService

@attribute [Authorize(Policy = "Admin")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Customer</h2>
    <hr />
    @if (customer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CustomUserName</dt>
            <dd class="col-sm-10">@customer.CustomUserName</dd>
        </dl>
        <EditForm method="post" Model="customer" OnValidSubmit="DeleteCustomer" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(customer is null)">Delete</button> |
            <a href="/customers">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Customer? customer;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        customer = await UserService.GetCustomerByIdAsync(Id);

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCustomer()
    {
        using var context = DbFactory.CreateDbContext();
        if (customer is not null)
        {
            // 🔥 Load the ApplicationUser
            var user = await context.Users.FirstOrDefaultAsync(u => u.Id == customer.Id);

            if (user is not null)
            {
                context.Users.Remove(user); // Delete the Identity user
            }

            context.Customers.Remove(customer); // Delete the Customer
            await context.SaveChangesAsync();
        }

        NavigationManager.NavigateTo("/customers");
    }
}
