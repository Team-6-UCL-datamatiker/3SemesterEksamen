@page "/customers/delete"
@using GotorzProjectMain.Data
@using Microsoft.EntityFrameworkCore
@using GotorzProjectMain.Models
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject Services.IExtendedUserService UserService
@inject ApplicationDbContext _context
@inject ILogger<RemoveCustomer> Logger

@attribute [Authorize(Policy = "Admin")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Customer</h2>
    <hr />
    @if (customer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CustomUserName</dt>
            <dd class="col-sm-10">@customer.CustomUserName</dd>
        </dl>
        <EditForm method="post" Model="customer" OnValidSubmit="DeleteCustomer" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(customer is null)">Delete</button> |
            <a href="/customers">Back to List</a>
        </EditForm>
    }
    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @_errorMessage
        </div>
    }
</div>

@code {
    private Customer? customer;

    [SupplyParameterFromQuery]
    private string Id { get; set; }
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        customer = await UserService.GetCustomerByIdAsync(Id);

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCustomer()
    {
        try
        {
            if (customer is not null)
            {
                // 🔥 Load the ApplicationUser
                var user = await _context.Users.FirstOrDefaultAsync(u => u.Id == customer.Id);

                if (user is not null)
                {
                    _context.Users.Remove(user); // Delete the Identity user
                }

                _context.Customers.Remove(customer); // Delete the Customer
                await _context.SaveChangesAsync();
            }
        }
        catch (DbUpdateConcurrencyException ex)
        {
            _errorMessage = "Another user has modified this data since you started editing. Your changes were not saved. Please reload and try again.";
            Logger.LogWarning(ex, _errorMessage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting customer: {ex.Message}");
        }
    NavigationManager.NavigateTo("/customers");
    }
}
