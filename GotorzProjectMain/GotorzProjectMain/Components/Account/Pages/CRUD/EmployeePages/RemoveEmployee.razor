@page "/employees/delete"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using GotorzProjectMain.Models
@inject IDbContextFactory<GotorzProjectMain.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject Services.IUserService UserService

@attribute [Authorize(Policy = "Admin")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
	<h2>Employee</h2>
	<hr />
	@if (employee is null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<dl class="row">
			<dt class="col-sm-2">ProfilePicture</dt>
			<dd class="col-sm-10">
				@if (employee.ProfilePicture != null)
				{
					<img src="@employee.ProfilePicture"
						 alt="Profile"
						 style="max-width:200px; max-height:200px;"
						 class="img-thumbnail" />
				}
				else
				{
					<span>No picture available.</span>
				}
			</dd>
		</dl>
		<dl class="row">
			<dt class="col-sm-2">Role</dt>
			<dd class="col-sm-10">@employee.Role</dd>
		</dl>
		<EditForm method="post" Model="employee" OnValidSubmit="DeleteEmployee" FormName="delete" Enhance>
			<button type="submit" class="btn btn-danger" disabled="@(employee is null)">Delete</button> |
			<a href="/employees">Back to List</a>
		</EditForm>
	}
</div>

@code {
	private Employee? employee;

	[SupplyParameterFromQuery]
	private string Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		employee = await UserService.GetEmployeeByIdAsync(Id);

		if (employee is null)
		{
			NavigationManager.NavigateTo("notfound");
		}
	}

	private async Task DeleteEmployee()
	{
		using var context = DbFactory.CreateDbContext();
		if (employee is not null)
		{
			// 🔥 Load the ApplicationUser
			var user = await context.Users.FirstOrDefaultAsync(u => u.Id == employee.Id);

			if (user is not null)
			{
				context.Users.Remove(user); // Delete the Identity user
			}

			context.Employees.Remove(employee); // Delete the Customer
			await context.SaveChangesAsync();
		}
		NavigationManager.NavigateTo("/employees");
	}
}
