@page "/employees/edit"
@using AutoMapper
@using GotorzProjectMain.Data
@using GotorzProjectMain.InputModels.Users.EmployeeInputModels
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using GotorzProjectMain.Models
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject Services.IExtendedUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject IWebHostEnvironment WebHostEnvironment
@inject IMapper Mapper
@inject ILogger<EditEmployee> Logger

@attribute [Authorize(Policy = "Admin")]

@rendermode InteractiveServer

<PageTitle>Edit Employee</PageTitle>

<h1>Edit Employee</h1>

<hr />
<hr />
@if (Employee == null || Employee.User == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm EditContext="_ec" OnValidSubmit="UpdateEmployee" FormName="edit">
				<DataAnnotationsValidator />
				<ValidationSummary role="alert" />

				<div class="mb-3">
					<label for="first-name" class="form-label">First Name:</label>
					<InputText id="first-name" @bind-Value="Input.FirstName" class="form-control" />
					<ValidationMessage For="() => Input.FirstName" class="text-danger" />
				</div>

				<div class="mb-3">
					<label for="last-name" class="form-label">Last Name:</label>
					<InputText id="last-name" @bind-Value="Input.LastName" class="form-control" />
					<ValidationMessage For="() => Input.LastName" class="text-danger" />
				</div>

				<div class="mb-3">
					<label for="email" class="form-label">Email:</label>
					<InputText id="email" @bind-Value="Input.Email" class="form-control" />
					<ValidationMessage For="() => Input.Email" class="text-danger" />
				</div>

				<div class="mb-3">
					<label for="phone" class="form-label">Phone:</label>
					<InputText id="phone" @bind-Value="Input.Phone" class="form-control" aria-required="true" onblur="@((FocusEventArgs e) => { if (string.IsNullOrWhiteSpace(Input.Phone)) { Input.Phone = null; _ec.Validate(); }})" />
					<ValidationMessage For="() => Input.Phone" class="text-danger" />
				</div>

				<div class="mb-3">
					<div class="form-check">
						<InputCheckbox id="is-admin" @bind-Value="Input.IsAdmin" class="form-check-input" />
						<label for="is-admin" class="form-check-label">Is Admin</label>
					</div>
					<ValidationMessage For="() => Input.IsAdmin" class="text-danger" />
				</div>

				<div class="mb-3">
					<label for="profile-picture" class="form-label">Profile Picture:</label>
					<InputFile id="profile-picture" OnChange="HandleProfilePictureUpload" class="form-control" />
					@if (Input.ProfilePictureFile != null)
					{
						<p>New file selected: @Input.ProfilePictureFile.Name</p>
					}
				</div>

				@if (Employee.ProfilePicture != null)
				{
					<img src="@Employee.ProfilePicture"
						 alt="Profile picture"
						 style="max-width:200px; max-height:200px;"
						 class="img-thumbnail" />
				}

				<button type="submit" class="btn btn-primary">Save</button>

				@if (!string.IsNullOrWhiteSpace(ErrorMessage))
				{
					<div class="alert alert-danger mt-3" role="alert">
						@ErrorMessage
					</div>
				}
			</EditForm>
		</div>
	</div>
}

<div>
	<a href="/employees">Back to List</a>
</div>

@code {
	[SupplyParameterFromQuery]
	private string? Id { get; set; }

	private EmployeeBaseInputModel Input { get; set; } = new();
	private Employee? Employee { get; set; }
	private string? ErrorMessage { get; set; }
	private EditContext? _ec;

	protected override async Task OnInitializedAsync()
	{

		_ec = new EditContext(Input);
	// Fetch the employee by ID in the query string
		Employee = await UserService.GetEmployeeByIdAsync(Id);

		if (Employee == null)
		{
			NavigationManager.NavigateTo("/employees"); // Redirect if not found
		}
		else
		{
			Mapper.Map(Employee, Input); // Map to input model
		}
	}

	// To protect from overposting attacks, enable the specific properties you want to bind to.
	// For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
	private async Task UpdateEmployee()
	{
		try
		{
			// Copy input back into Employee
			Mapper.Map(Input, Employee);

			if (Input.ProfilePictureFile != null)
			{
				var newUri = await SaveProfilePicture(Input.ProfilePictureFile);
				if (newUri != null)
				{
					Employee.ProfilePicture = newUri;
				}
			}

			await Context.SaveChangesAsync();
			NavigationManager.NavigateTo("/employees");
		}
		catch (DbUpdateConcurrencyException ex)
		{
			ErrorMessage = "Another user has modified this data since you started editing. Your changes were not saved. Please reload and try again.";
			Logger.LogWarning(ex, ErrorMessage);
		}
		catch (Exception ex)
		{
			ErrorMessage = "An unexpected error occurred. Please try again.";
			Logger.LogError(ex, ErrorMessage);
		}
	}

	// Helper method to save the uploaded profile picture.
	private async Task<Uri?> SaveProfilePicture(IBrowserFile file)
	{
		try
		{
			var fileName = Path.GetFileName(file.Name);
			var imagesFolder = Path.Combine(WebHostEnvironment.WebRootPath, "images");

			// Ensure the images folder exists
			if (!Directory.Exists(imagesFolder))
			{
				Directory.CreateDirectory(imagesFolder);
			}

			var filePath = Path.Combine(imagesFolder, fileName);
			
			// Check if the file already exists
			if (!File.Exists(filePath))
			{
				using (var stream = new FileStream(filePath, FileMode.Create))
				{
					await file.OpenReadStream().CopyToAsync(stream);
				}
			}

			var relativePath = "/images/" + fileName;
			return new Uri(relativePath, UriKind.Relative);
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Failed to save profile picture.");
			return null;
		}
	}

	private async Task HandleProfilePictureUpload(InputFileChangeEventArgs e)
	{
		if (e.File != null)
		{
			Input.ProfilePictureFile = e.File;
		}
	}
}
