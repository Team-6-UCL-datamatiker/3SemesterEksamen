@page "/Account/RegisterEmployee"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using GotorzProjectMain.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GotorzProjectMain.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<RegisterEmployee> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext
@inject IWebHostEnvironment WebHostEnvironment

@*@attribute [Authorize(Policy = "Admin")]*@

@rendermode InteractiveServer

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new employee account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="john" />
                <label for="firstname">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="lastname" aria-required="true" placeholder="doe" />
                <label for="lastname">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="phone" @bind-Value="Input.Phone" class="form-control" autocomplete="phone" aria-required="true" placeholder="phone number" />
                <label for="phone">Phone Number</label>
                <ValidationMessage For="() => Input.Phone" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="profilePicture" class="form-label">Profile Picture:</label>
                <InputFile id="profilePicture" accept="image/*" OnChange="HandleProfilePictureUpload" class="form-control" />
                <ValidationMessage For="() => Input.ProfilePictureFile" class="text-danger" />
            </div>

            <!--    Field to set role, might need revisiting    -->
            <div class="form-check mb-3">
                <InputCheckbox id="isAdmin" @bind-Value="Input.IsAdmin" class="form-check-input" />
                <label class="form-check-label" for="isAdmin">Is Admin?</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <!--
    <div class="col-md-6 col-md-offset-2">
    <section>
    <h3>Use another service to register.</h3>
    <hr />
    <ExternalLoginPicker />
    </section>
    </div>
    -->
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        //this is where custom fields are set to update the user, all fields that arent covered by the createAsync method
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.PhoneNumber = Input.Phone;
        await UserManager.UpdateAsync(user);

        // If a profile picture was uploaded, handle file processing
        Uri? profilePictureUri = null;
        if (Input.ProfilePictureFile != null)
        {
            profilePictureUri = await SaveProfilePicture(Input.ProfilePictureFile);
        }

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        var employee = new Employee
			{
				Id = user.Id,
				Role = Input.IsAdmin, // Sets the role
				ProfilePicture = profilePictureUri
			};

        DbContext.Employees.Add(employee);

        // Assign user to either Admin or Employee role based on the checkbox
        string roleToAssign = Input.IsAdmin ? "Admin" : "Employee";
        var roleResult = await UserManager.AddToRoleAsync(user, roleToAssign);
        if (!roleResult.Succeeded)
        {
            identityErrors = roleResult.Errors;
            return;
        }

        await DbContext.SaveChangesAsync();

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    // Helper method to save the profile picture and return the file URI
    private async Task<Uri?> SaveProfilePicture(IBrowserFile file)
    {
        try
        {
            // Use the file name from the uploaded file
            var fileName = Path.GetFileName(file.Name);
            var imagesFolder = Path.Combine(WebHostEnvironment.WebRootPath, "images");

			if (!Directory.Exists(imagesFolder))
			{
				Directory.CreateDirectory(imagesFolder);
			}

			// Combine to create the full file path
			var filePath = Path.Combine(imagesFolder, fileName);

			// If the file doesn't exist, save it.
			if (!File.Exists(filePath))
			{
				using (var stream = new FileStream(filePath, FileMode.Create))
				{
					await file.OpenReadStream().CopyToAsync(stream);
				}
			}

			// Return the URI that points to the image.
			// Ensure your app is configured to serve static files from wwwroot.
			var relativePath = "/images/" + fileName;
			return new Uri(relativePath, UriKind.Relative);
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Failed to save the profile picture.");
			return null;
		}
	}

	// Event handler for the file input, which assigns the selected file to our model property.
	private async Task HandleProfilePictureUpload(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file != null)
		{
			Input.ProfilePictureFile = file;
		}
		else
		{
			Input.ProfilePictureFile = null;
		}
	}

	private sealed class InputModel
	{
		[Required]
		[Display(Name = "FirstName")]
		public string FirstName { get; set; } = "";

		[Required]
		[Display(Name = "LastName")]
		public string LastName { get; set; } = "";

		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";

		[Required]
		[Phone]
		[Display(Name = "Phone")]
		public string Phone { get; set; } = "";


		// This part is needed and acts to enforce that this needs a choice.
		[Display(Name = "Is Admin?")]
		public bool IsAdmin { get; set; }


		// Property to hold the uploaded profile picture
		public IBrowserFile? ProfilePictureFile { get; set; }

	}
}
