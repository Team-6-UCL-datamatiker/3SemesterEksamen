@page "/admindashboard"
@using GotorzProjectMain.Data
@using GotorzProjectMain.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@inject ApplicationDbContext Context
@inject ILogger<AdminDashboard> Logger

@rendermode InteractiveServer
@attribute [Authorize(Policy = "Admin")]

<h1>Admin Dashboard</h1>

<button class="btn btn-secondary mb-3" @onclick="LoadSuspiciousAttemptsAsync">Update page</button>
<div class="mb-3 d-flex gap-3 align-items-end">
    <div>
        <label for="filterSelect" class="form-label">Filter login-type</label>
        <select class="form-select" @onchange="OnFilterChanged">
            <option value="All">Alle</option>
            <option value="RequiresTwoFactor">2FA Required</option>
            <option value="LockedOut">Locked out</option>
            <option value="Failed">Failed login</option>
        </select>
    </div>
    <div>
        <label for="emailSearch" class="form-label">Search for email</label>
        <input type="text" id="emailSearch" class="form-control" @bind="searchEmail" @bind:event="oninput" />
    </div>
</div>

@if (usersWithSuspiciousAttempts == null)
{
    <p>Loading...</p>
}
else if (!usersWithSuspiciousAttempts.Any())
{
    <p>No failed login tries within the last 30 minutes.</p>
}
else
{
    @foreach (var user in usersWithSuspiciousAttempts)
    {
        <div class="card mb-3 @(user.Attempts.Count >= 10 ? "border-danger bg-danger-subtle" : "border-secondary")"
             style="cursor: pointer;" @onclick="() => Toggle(user.Username)">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div>
                    <strong>@user.Username</strong>
                    <span class="badge @(user.Attempts.Count >= 10 ? "bg-danger" : "bg-warning")">
                        @user.Attempts.Count Number of tries
                    </span>
                    <small class="text-muted ms-2">
                        Senest: @user.Attempts.First().TimeOfAttempt.ToLocalTime().ToShortTimeString()
                    </small>
                </div>
                @if (user.Attempts.Select(a => a.IPAddress).Distinct().Count() == 1)
                {
                    <span class="badge bg-info text-dark">Same IP</span>
                }
            </div>

            @if (ExpandedUser == user.Username)
            {
                <div class="card-body">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Time</th>
                                <th>IP Address</th>
                                <th>Reason</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var attempt in user.Attempts)
                            {
                                <tr>
                                    <td>@attempt.TimeOfAttempt.ToLocalTime()</td>
                                    <td>@attempt.IPAddress</td>
                                    <td>@attempt.FailureReason</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    }
}

@code {
    private string selectedFilter = "All";
    private string searchEmail = string.Empty;
    private string? ExpandedUser;
    private List<UserAttemptGroup>? usersWithSuspiciousAttempts;
    
    private async Task OnFilterChanged(ChangeEventArgs e)
{
    selectedFilter = e.Value?.ToString() ?? "All";
    await LoadSuspiciousAttemptsAsync();
    StateHasChanged();
}

    protected override async Task OnInitializedAsync()
    {
        await LoadSuspiciousAttemptsAsync();
    }

    private async Task LoadSuspiciousAttemptsAsync()
    {
        try
        {
            var since = DateTime.UtcNow.AddMinutes(-30);
            var baseQuery = Context.LoginAttempts.Where(x => x.TimeOfAttempt >= since);

            if (!string.IsNullOrWhiteSpace(searchEmail))
            {
                var emailLower = searchEmail.ToLower();
                baseQuery = baseQuery.Where(x => x.Username.ToLower().Contains(emailLower));
            }

            var baseList = await baseQuery.ToListAsync();

            Func<LoginAttempt, bool> attemptFilter = selectedFilter switch
            {
                "RequiresTwoFactor" => a => a.FailureReason != null && a.FailureReason.Trim().Equals("RequiresTwoFactor", StringComparison.OrdinalIgnoreCase),
                "LockedOut" => a => a.FailureReason == "LockedOut",
                "Failed" => a => !a.IsSuccessful && a.FailureReason != "RequiresTwoFactor" && a.FailureReason != "LockedOut",
                _ => a => !a.IsSuccessful,
            };

            var filteredAttempts = baseList.Where(attemptFilter).ToList();

            var grouped = filteredAttempts
                .GroupBy(x => x.Username)
                .Select(g => new UserAttemptGroup
                    {
                        Username = g.Key,
                        Attempts = g.OrderByDescending(x => x.TimeOfAttempt).ToList()
                    })
                .Where(g => selectedFilter switch
                {
                    "RequiresTwoFactor" => g.Attempts.Count(a => a.FailureReason == "RequiresTwoFactor") >= 5,
                    "LockedOut" => g.Attempts.Count(a => a.FailureReason == "LockedOut") >= 5,
                    "Failed" => g.Attempts.Count(a => !a.IsSuccessful && a.FailureReason != "RequiresTwoFactor" && a.FailureReason != "LockedOut") >= 5,
                    _ => g.Attempts.Count >= 5,
                })
                .OrderByDescending(g => g.Attempts.Count)
                .ToList();

            usersWithSuspiciousAttempts = grouped;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading suspicious attempts");
            usersWithSuspiciousAttempts = new List<UserAttemptGroup>();
        }
    }

    private void Toggle(string username)
    {
        ExpandedUser = ExpandedUser == username ? null : username;
    }

    private class UserAttemptGroup
    {
        public string Username { get; set; } = string.Empty;
        public List<LoginAttempt> Attempts { get; set; } = new();
    }
}
