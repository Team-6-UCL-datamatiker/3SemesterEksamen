@page "/vacationoffers/edit"
@using AutoMapper
@using Microsoft.EntityFrameworkCore
@using GotorzProjectMain.Models
@using GotorzProjectMain.InputModels.VacationOfferInputModels
@using GotorzProjectMain.Services
@inject GotorzProjectMain.Data.ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject IExtendedUserService ExtendedUserService
@inject IMapper Mapper
@inject ILogger<EditOffer> Logger
@rendermode InteractiveServer


<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>VacationOffer</h2>
<hr />
@if (VacationOfferInput is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="VacationOfferInput" OnValidSubmit="UpdateVacationOffer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <div class="mb-3">
                    <label for="employeeemail" class="form-label">EmployeeEmail:</label>
                    <InputText id="employeeemail" @bind-Value="VacationOfferInput.EmployeeEmail" class="form-control" />
                    <ValidationMessage For="() => VacationOfferInput.EmployeeEmail" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="totalprice" class="form-label">TotalPrice:</label>
                    <InputNumber id="totalprice" @bind-Value="VacationOfferInput.TotalPrice" class="form-control" />
                    <ValidationMessage For="() => VacationOfferInput.TotalPrice" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="startdate" class="form-label">StartDate:</label>
                    <InputDate id="startdate" @bind-Value="VacationOfferInput.StartDate" class="form-control" />
                    <ValidationMessage For="() => VacationOfferInput.StartDate" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="enddate" class="form-label">EndDate:</label>
                    <InputDate id="enddate" @bind-Value="VacationOfferInput.EndDate" class="form-control" />
                    <ValidationMessage For="() => VacationOfferInput.EndDate" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="misc" class="form-label">Misc:</label>
                    <InputText id="misc" @bind-Value="VacationOfferInput.Misc" class="form-control" />
                    <ValidationMessage For="() => VacationOfferInput.Misc" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="expirationdate" class="form-label">ExpirationDate:</label>
                    <InputDate id="expirationdate" @bind-Value="VacationOfferInput.ExpirationDate" class="form-control" />
                    <ValidationMessage For="() => VacationOfferInput.ExpirationDate" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @_errorMessage
                </div>
            }
        </div>
    </div>
}

<div>
    <a href="/vacationoffers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int VacationOfferId { get; set; }

    private VacationOffer VacationOffer { get; set; }

    private string? _errorMessage;

    private VacationOfferBaseInputModel VacationOfferInput { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        VacationOffer = await Context.VacationOffers.FirstOrDefaultAsync(m => m.VacationOfferId == VacationOfferId);
        if (VacationOffer is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }
        Mapper.Map(VacationOffer, VacationOfferInput);

    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateVacationOffer()
    {

        

        try
        {
            Mapper.Map(VacationOfferInput, VacationOffer); // apply updated values
            await Context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!Context.VacationOffers.Any(e => e.VacationOfferId == VacationOfferId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        // catch (DbUpdateConcurrencyException ex)
        // {
        //     _errorMessage = "Another user has modified this data since you started editing. Your changes were not saved. Please reload and try again.";
        //     Logger.LogWarning(ex, _errorMessage);
        // }
        catch (Exception ex)
        {
            _errorMessage = "An unexpected error occurred. Please try again.";
            Logger.LogError(ex, _errorMessage);
        }

        NavigationManager.NavigateTo("/vacationoffers");
    }

    private bool VacationOfferExists(int vacationofferid)
    {
        return Context.VacationOffers.Any(e => e.VacationOfferId == vacationofferid);
    }
}
