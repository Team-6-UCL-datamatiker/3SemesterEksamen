@page "/vacationoffers/edit"
@using AutoMapper
@using Microsoft.EntityFrameworkCore
@using GotorzProjectMain.Models
@using GotorzProjectMain.InputModels.VacationOfferInputModels
@using GotorzProjectMain.Services
@inject GotorzProjectMain.Data.ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject IExtendedUserService ExtendedUserService
@inject IMapper Mapper
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>VacationOffer</h2>
<hr />
@if (VacationOffer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="EditVacationOfferInput" OnValidSubmit="UpdateVacationOffer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="EditVacationOfferInput.VacationOfferId" @bind-value="EditVacationOfferInput.VacationOfferId" />

                <div class="mb-3">
                    <label for="vacationrequestid" class="form-label">VacationRequestId:</label>
                    <InputNumber id="vacationrequestid" @bind-Value="EditVacationOfferInput.VacationRequestId" class="form-control" />
                    <ValidationMessage For="() => EditVacationOfferInput.VacationRequestId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="employeeemail" class="form-label">EmployeeEmail:</label>
                    <InputText id="employeeemail" @bind-Value="EditVacationOfferInput.EmployeeEmail" class="form-control" />
                    <ValidationMessage For="() => EditVacationOfferInput.EmployeeEmail" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="totalprice" class="form-label">TotalPrice:</label>
                    <InputNumber id="totalprice" @bind-Value="EditVacationOfferInput.TotalPrice" class="form-control" />
                    <ValidationMessage For="() => EditVacationOfferInput.TotalPrice" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="country" class="form-label">Country:</label>
                    <InputText id="country" @bind-Value="EditVacationOfferInput.Country" class="form-control" />
                    <ValidationMessage For="() => EditVacationOfferInput.Country" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="startdate" class="form-label">StartDate:</label>
                    <InputDate id="startdate" @bind-Value="EditVacationOfferInput.StartDate" class="form-control" />
                    <ValidationMessage For="() => EditVacationOfferInput.StartDate" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="enddate" class="form-label">EndDate:</label>
                    <InputDate id="enddate" @bind-Value="EditVacationOfferInput.EndDate" class="form-control" />
                    <ValidationMessage For="() => EditVacationOfferInput.EndDate" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="misc" class="form-label">Misc:</label>
                    <InputText id="misc" @bind-Value="EditVacationOfferInput.Misc" class="form-control" />
                    <ValidationMessage For="() => EditVacationOfferInput.Misc" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="expirationdate" class="form-label">ExpirationDate:</label>
                    <InputDate id="expirationdate" @bind-Value="EditVacationOfferInput.ExpirationDate" class="form-control" />
                    <ValidationMessage For="() => EditVacationOfferInput.ExpirationDate" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/vacationoffers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int VacationOfferId { get; set; }


    private InputModels.VacationOfferInputModels.EditVacationOfferInputModel EditVacationOfferInput { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var entity = await Context.VacationOffers.FirstOrDefaultAsync(m => m.VacationOfferId == VacationOfferId);
        if (entity is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }
        EditVacationOfferInput = Mapper.Map<InputModels.VacationOfferInputModels.EditVacationOfferInputModel>(entity);

    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateVacationOffer()
    {
        var entity = await Context.VacationOffers.FirstOrDefaultAsync(e => e.VacationOfferId == VacationOfferId);
        if (entity is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        Mapper.Map(EditVacationOfferInput, entity); // apply updated values

        try
        {
            await Context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!Context.VacationOffers.Any(e => e.VacationOfferId == VacationOfferId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/vacationoffers");
    }

    private bool VacationOfferExists(int vacationofferid)
    {
        return Context.VacationOffers.Any(e => e.VacationOfferId == vacationofferid);
    }
}
