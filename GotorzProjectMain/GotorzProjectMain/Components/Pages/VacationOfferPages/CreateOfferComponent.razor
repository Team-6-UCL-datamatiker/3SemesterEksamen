@using AutoMapper
@using GotorzProjectMain.Components.Pages.HotelPages
@using GotorzProjectMain.Models
@using GotorzProjectMain.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject ApplicationDbContext Context
@inject IMapper Mapper
@inject ILogger<FlightSearch> Logger

@rendermode InteractiveServer

<details>
	<summary class="summary-heading">Flight Search 1</summary><br />
	<FlightComponent ComponentId="1" OnFlightSelected="HandleFlightSelected" />
</details>
<details>
	<summary class="summary-heading">Flight Search 2</summary><br />
	<FlightComponent ComponentId="2" OnFlightSelected="HandleFlightSelected" />
</details>
<details>
	<summary class="summary-heading">Hotel Search</summary><br />
	<SearchHotels OnHotelSelected="HandleHotelSelected" />
</details>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
	<div class="alert alert-danger mt-3" role="alert">
		@ErrorMessage
	</div>
}

<button @onclick="CreateVacationOffer" disabled="@(OutwardRoute == null || ReturnRoute == null || HotelBooking == null)" class="btn btn-primary" style="padding: 0.4rem 1rem; padding-top: 0.6rem">Create Offer</button>

@code
{
	string? ErrorMessage;
	[Parameter]
	public VacationRequest? VacationRequest { get; set; }
	[Parameter]
	public Employee? Employee { get; set; }
	VacationOffer? VacationOffer { get; set; }
	FlightBooking? FlightBooking { get; set; }
	FlightBooking? ReturnFlightBooking { get; set; }
	HotelBooking? HotelBooking { get; set; }
	FlightRoute? OutwardRoute { get; set; }
	FlightRoute? ReturnRoute { get; set; }

	public async Task CreateVacationOffer()
	{
		await using var transaction = await Context.Database.BeginTransactionAsync();

		try {
			VacationOffer = new VacationOffer
			{
				VacationRequestId = VacationRequest!.VacationRequestId,
				EmployeeEmail = Employee!.User.Email!,
				StartDate = OutwardRoute!.Legs.First().DepartureTime,
				EndDate = ReturnRoute!.Legs.Last().ArrivalTime,
				Misc = "-",
				OfferStatus = OfferStatus.Waiting,
				ExpirationDate = DateTime.Now.AddDays(10),
			};

			Context.VacationOffers.Add(VacationOffer);
			Context.SaveChanges();

			FlightBooking = new FlightBooking
			{
				// Airline = string.Join(", ", OutwardRoute.Legs.Select(leg => leg.Airline)),
				TotalPrice = OutwardRoute.TotalPrice + ReturnRoute.TotalPrice,
				DepartureTime = OutwardRoute.Legs.First().DepartureTime,
				VacationOfferId = VacationOffer.VacationOfferId,
				DepartureAirport = OutwardRoute.Legs.First().DepartureAirportName,
				// ArrivalAirport = OutwardRoute.Legs.Last().ArrivalAirportName
				ArrivalAirport = ReturnRoute.Legs.Last().ArrivalAirportName
			};

			Context.FlightBookings.Add(FlightBooking);
			Context.SaveChanges();

			OutwardRoute.FlightBookingId = FlightBooking.FlightBookingId;
			ReturnRoute.FlightBookingId = FlightBooking.FlightBookingId;
			Context.FlightRoutes.Add(OutwardRoute);
			Context.FlightRoutes.Add(ReturnRoute);
			Context.SaveChanges();

			foreach (var flight in OutwardRoute.Legs)
			{
				flight.FlightRouteId = OutwardRoute.RouteId;
				Context.Flights.Add(flight);
			}
			foreach (var layover in OutwardRoute.Layovers)
			{
				layover.FlightRouteId = OutwardRoute.RouteId;
				Context.Layovers.Add(layover);
			}
			foreach (var flight in ReturnRoute.Legs)
			{
				flight.FlightRouteId = ReturnRoute.RouteId;
				Context.Flights.Add(flight);
			}
			foreach (var layover in ReturnRoute.Layovers)
			{
				layover.FlightRouteId = ReturnRoute.RouteId;
				Context.Layovers.Add(layover);
			}

			if (HotelBooking != null)
			{
				HotelBooking.VacationOfferId = VacationOffer.VacationOfferId;
				Context.HotelBookings.Add(HotelBooking);
			}

			VacationOffer.TotalPrice = FlightBooking!.TotalPrice + HotelBooking!.TotalPrice;
			Context.VacationOffers.Add(VacationOffer);
			Context.SaveChanges();
			await transaction.CommitAsync();
			NavigationManager.NavigateTo("/vacationrequests");
		}
		catch (Exception ex)
		{
			await transaction.RollbackAsync();
			ErrorMessage = "An unexpected error occurred. Please try again.";
			Logger.LogError(ex, ErrorMessage);
		}
	}

	private void HandleFlightSelected((string ComponentId, FlightRoute Route) selection)
	{
		if (selection.ComponentId == "1")
		{
			OutwardRoute = selection.Route;
		}
		else if (selection.ComponentId == "2")
		{
			ReturnRoute = selection.Route;
		}
	}

	private void HandleHotelSelected(Hotel selectedHotel)
	{
		try
		{
			HotelBooking = Mapper.Map<HotelBooking>(selectedHotel);
		}
		catch (Exception ex)
		{
			Logger.LogError($"Mapping error: {ex}");
		}
	}


}
