@page "/customers/details"
@using GotorzProjectMain.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using GotorzProjectMain.Models
@inject NavigationManager NavigationManager
@inject Services.IExtendedUserService UserService
@inject ILogger<DetailsCustomer> Logger

@attribute [Authorize(Policy = "Admin")]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
	<div class="alert alert-danger mt-3" role="alert">
		@errorMessage
	</div>
}

<div>
	<h2>Customer</h2>
	<hr />
	@if (customer is null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<dl class="row">
			<dt class="col-sm-2">Username</dt>
			<dd class="col-sm-10">@customer.CustomUserName</dd>
		</dl>
		<dl class="row">
			<dt class="col-sm-2">First Name</dt>
			<dd class="col-sm-10">@customer.User.FirstName</dd>
		</dl>
		<dl class="row">
			<dt class="col-sm-2">Last Name</dt>
			<dd class="col-sm-10">@customer.User.LastName</dd>
		</dl>
		<dl class="row">
			<dt class="col-sm-2">Email</dt>
			<dd class="col-sm-10">@customer.User.Email</dd>
		</dl>
		<dl class="row">
			<dt class="col-sm-2">Phone</dt>
			<dd class="col-sm-10">@customer.User.PhoneNumber</dd>
		</dl>
		<div>
			<a href="@($"/customers/edit?id={customer.Id}")">Edit</a> |
			<a href="@($"/customers")">Back to List</a>
		</div>
	}
</div>

@code {
	private string? errorMessage;
	private Customer? customer;

	[SupplyParameterFromQuery]
	private string Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			customer = await UserService.GetCustomerByIdAsync(Id);
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred while loading the customer details.";
			Logger.LogError(ex, errorMessage);
		}

		if (customer is null)
		{
			NavigationManager.NavigateTo("notfound");
		}
	}
}
