@page "/customers/delete"
@using GotorzProjectMain.Data
@using Microsoft.EntityFrameworkCore
@using GotorzProjectMain.Models
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject Services.IExtendedUserService UserService
@inject ApplicationDbContext Context
@inject ILogger<RemoveCustomer> Logger

@attribute [Authorize(Policy = "Admin")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
	<h2>Customer</h2>
	<hr />
	@if (customer is null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<dl class="row">
			<dt class="col-sm-2">CustomUserName</dt>
			<dd class="col-sm-10">@customer.CustomUserName</dd>
		</dl>
		<EditForm method="post" Model="customer" OnValidSubmit="DeleteCustomer" FormName="delete" Enhance>
			<button type="submit" class="btn btn-danger" disabled="@(customer is null)">Delete</button> |
			<a href="/customers">Back to List</a>
		</EditForm>
	}
	@if (!string.IsNullOrWhiteSpace(_errorMessage))
	{
		<div class="alert alert-danger mt-3" role="alert">
			@_errorMessage
		</div>
	}
</div>

@code {
	private Customer? customer;

	[SupplyParameterFromQuery]
	private string Id { get; set; }
	private string? _errorMessage;

	protected override async Task OnInitializedAsync()
	{
		customer = await UserService.GetCustomerByIdAsync(Id);

		if (customer is null)
		{
			NavigationManager.NavigateTo("notfound");
		}
	}

	private async Task DeleteCustomer()
	{
		await using var transaction = await Context.Database.BeginTransactionAsync();

		try
		{
			if (customer is not null)
			{
				await Context.VacationRequests
					.Where(vr => vr.CustomerId == Id && vr.Status == RequestStatus.PendingRequest)
					.ExecuteDeleteAsync();

				await Context.Customers
					.Where(c => c.Id == customer.Id)
					.ExecuteDeleteAsync();

				await Context.Users
					.Where(u => u.Id == customer.Id)
					.ExecuteDeleteAsync();

				await transaction.CommitAsync();
			}
		}
		catch (DbUpdateConcurrencyException ex)
		{
			await transaction.RollbackAsync();
			_errorMessage = "Another user has modified this data since you started editing. Your changes were not saved. Please reload and try again.";
			Logger.LogWarning(ex, _errorMessage);
		}
		catch (Exception ex)
		{
			await transaction.RollbackAsync();
			Logger.LogError(ex, ex.Message);
		}

		NavigationManager.NavigateTo("/customers");
	}
}
