@page "/flights/search"

@using GotorzProjectMain.Models
@using GotorzProjectMain.Services.API

@inject IFlightService FlightService

@rendermode InteractiveServer


<input @bind="FromCity" placeholder="Departure city (e.g. Copenhagen)" />
<input @bind="ToCity" placeholder="Destination city (e.g. London)" />
<input type="date" @bind="Outbound" />
<input @bind="AdultCount" type="number" min="1" />
<input @bind="ChildCount" type="number" min="0" />

<button @onclick="Search">Search</button>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
	<div class="alert alert-warning">
		@ErrorMessage
	</div>
}

else if (Flights != null)
{
<label>
  Choose your flight:
  <select @bind="SelectedFlightIndex">
    <option value="">-- select one --</option>
    @for (int i = 0; i < Flights.Count; i++)
    {
      var f = Flights[i];
      <option value="@i" 
              @key="i">
        @($"{f.DepartureAirportCode}→{f.ArrivalAirportCode} | " +
          $"{f.DepartureTime:HH:mm}–{f.ArrivalTime:HH:mm} | {f.Price} DKK")
      </option>
    }
  </select>
</label>

	@if (SelectedFlight != null)
	{
		<div class="mt-3 p-2 border">
			<h4>Selected Flight</h4>
			<p>
				@SelectedFlight.DepartureAirportCode →
				@SelectedFlight.ArrivalAirportCode<br />
				Departure: @SelectedFlight.DepartureTime<br />
				Arrival: @SelectedFlight.ArrivalTime<br />
				Price: @SelectedFlight.Price DKK<br />
				Airline: @SelectedFlight.Airline
			</p>
			<a href="@SelectedFlight.BookingLink" target="_blank">Booking link her?</a>
		</div>
	}

}


@code {
	string FromCity = "Copenhagen", ToCity = "London";
	DateTime Outbound = DateTime.Today.AddDays(7);
	int AdultCount = 1;
	int ChildCount = 0;
	
	List<Flight>? Flights;
	string? ErrorMessage;

	int? SelectedFlightIndex;          // holds the array index of the chosen flight
	Flight? SelectedFlight =>          // read‐only property to get the actual object
		(SelectedFlightIndex.HasValue && Flights != null)
				? Flights[SelectedFlightIndex.Value]
				: null;


	// Performs a flight search using city names
	async Task Search()
	{
		// Reset state before search
		ErrorMessage = null;
		Flights = null;

		// Look up airport codes based on user input
		if (!CityAirportMap.Map.TryGetValue(FromCity, out var fromAirports)) //if it gets a match, it saves it to fromAirports else set errormessage
		{
			ErrorMessage = $"Origin city “{FromCity}” is not supported.";
			return;
		}
		if (!CityAirportMap.Map.TryGetValue(ToCity, out var toAirports)) //if it gets a match, it saves it to toAirports else set errormessage
		{
			ErrorMessage = $"Destination city “{ToCity}” is not supported.";
			return;
		}

		// Pass comma-separated Airport codes to the API
		string fromParam = string.Join(",", fromAirports);
		string toParam = string.Join(",", toAirports);

		// Request flight offers from the external API
		Flights = await FlightService.SearchAsync(
			fromParam,
			toParam,
			Outbound,
			AdultCount,
			ChildCount);
	}
}
