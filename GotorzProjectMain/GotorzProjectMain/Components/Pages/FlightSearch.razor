@page "/flights/search"

@using GotorzProjectMain.Models
@using GotorzProjectMain.Services.API

@inject IFlightService FlightService

@rendermode InteractiveServer


<input @bind="FromCity" placeholder="Departure city (e.g. Copenhagen)" />
<input @bind="ToCity" placeholder="Destination city (e.g. London)" />
<input type="date" @bind="Outbound" />
<input @bind="AdultCount" type="number" min="1" />
<input @bind="ChildCount" type="number" min="0" />

<button @onclick="Search">Search</button>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
	<div class="alert alert-warning">
		@ErrorMessage
	</div>
}

else if (Flights != null)
{
	<table>
		<thead>
			<tr>
				<th>Route</th>
				<th>Depart</th>
				<th>Arrive</th>
				<th>Price</th>
				<th>Airline</th>
			</tr>
		</thead>
		<tbody>
			@foreach (Flight flight in Flights)
			{
				<tr>
					<td>@flight.DepartureAirportCode → @flight.ArrivalAirportCode</td>
					<td>@flight.DepartureTime</td>
					<td>@flight.ArrivalTime</td>
					<td>@flight.Price DKK</td>
					<td>@flight.Airline</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	string FromCity = "Copenhagen", ToCity = "London";
	DateTime Outbound = DateTime.Today.AddDays(7);
	int AdultCount = 1;
	int ChildCount = 0;

	List<Flight>? Flights;
	string? ErrorMessage;

	// Performs a flight search using city names
	async Task Search()
	{
		// Reset state before search
		ErrorMessage = null;
		Flights = null;

		// Look up airport codes based on user input
		if (!CityAirportMap.Map.TryGetValue(FromCity, out var fromAirports)) //if it gets a match, it saves it to fromAirports else set errormessage
		{
			ErrorMessage = $"Origin city “{FromCity}” is not supported.";
			return;
		}
		if (!CityAirportMap.Map.TryGetValue(ToCity, out var toAirports)) //if it gets a match, it saves it to toAirports else set errormessage
		{
			ErrorMessage = $"Destination city “{ToCity}” is not supported.";
			return;
		}

		// Pass comma-separated Airport codes to the API
		string fromParam = string.Join(",", fromAirports);
		string toParam = string.Join(",", toAirports);

		// 3) call your existing FlightService
		Flights = await FlightService.SearchAsync(
			fromParam,
			toParam,
			Outbound,
			AdultCount,
			ChildCount);
	}
}
