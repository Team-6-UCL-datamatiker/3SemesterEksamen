@page "/flights/search"

@using GotorzProjectMain.Models
@using GotorzProjectMain.Models.DTOs
@using GotorzProjectMain.Services.API

@inject IFlightService FlightService

@rendermode InteractiveServer

@* Inputs *@
<div style="display:flex; gap:1rem; align-items:flex-start; margin-bottom:1rem;">
	<div>
		<label for="fromCity">Depature City</label><br />
		<input id="fromCity"
			   @bind="FromCity"
			   placeholder="Copenhagen"
			   style="padding:0.5rem; border:1px solid #ccc; border-radius:4px;" />
	</div>

	<div>
		<label for="toCity">Arrival City</label><br />
		<input id="toCity"
			   @bind="ToCity"
			   placeholder="London"
			   style="padding:0.5rem; border:1px solid #ccc; border-radius:4px;" />
	</div>

	<div>
		<label for="outbound">Outbound Date</label><br />
		<input id="outbound"
			   type="date"
			   @bind="Outbound"
			   min="@DateTime.Today.ToString("yyyy-MM-dd")"
			   style="padding:0.5rem; border:1px solid #ccc; border-radius:4px;" />
	</div>

	<div>
		<label for="adults">Adults</label><br />
		<input id="adults"
			   type="number" min="1"
			   @bind="AdultCount"
			   style="padding:0.5rem; border:1px solid #ccc; border-radius:4px; width:4rem;" />
	</div>

	<div>
		<label for="children">Children</label><br />
		<input id="children"
			   type="number" min="0"
			   @bind="ChildCount"
			   style="padding:0.5rem; border:1px solid #ccc; border-radius:4px; width:4rem;" />
	</div>
</div>

<button @onclick="Search">Search</button>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
	<div class="alert alert-warning">
		@ErrorMessage
	</div>
}

@* Flightroute Dropdown *@
else if (FlightRoutes != null)
{
	<label>
		Choose flightroute:
		<select @bind="SelectedFlightRoutIndex">
			<option value="">-- pick a flightroute --</option>
			@for (int i = 0; i < FlightRoutes.Count; i++)
			{
				FlightRoute offer = FlightRoutes[i];
				<option value="@i" @key="i">
					@(
								string.Join(" → ",
								offer.Segments.Select(s => s.DepartureAirportCode) // depatureairport -> last arrivalaiport
								.Concat(new[] { offer.Segments.Last().ArrivalAirportCode }))
								+ $" ({offer.Segments.Count} legs) {offer.TotalPrice} DKK"
								)
				</option>
			}
		</select>
	</label>

@* 	Selected flightroute details *@
	@if (SelectedFlightRoute != null)
	{
		<!-- Header -->
		<h4>Selected Flight</h4>

		<!-- For each leg -->
		@for (int i = 0; i < SelectedFlightRoute.Segments.Count; i++)
		{
			Flight flightLeg = SelectedFlightRoute.Segments[i];
			<div class="p-2 border rounded mb-2">
				<div><strong>Route:</strong> @flightLeg.DepartureAirportCode → @flightLeg.ArrivalAirportCode</div>
				<div><strong>Departure:</strong> @flightLeg.DepartureTime.ToString("dd/MM/yyyy HH:mm")</div>
				<div><strong>Arrival:</strong>   @flightLeg.ArrivalTime.ToString("dd/MM/yyyy HH:mm")</div>
				<div><strong>Airline:</strong>   @flightLeg.Airline</div>
			</div>

			@* If there’s a layover after this leg, show it *@
			@if (i < SelectedFlightRoute.Layovers.Count)
			{
				Layover layover = SelectedFlightRoute.Layovers[i];
				<div class="p-2 border rounded mb-2 bg-light">
					<strong>Layover at @layover.Name:</strong> @layover.DurationDisplay
				</div>
			}
		}

		<div class="mt-4 p-3 bg-gray-100 rounded">
			<div><strong>Total duration:</strong> @SelectedFlightRoute.TotalTravelTimeDisplay</div>
			<div><strong>Total price:</strong>   @SelectedFlightRoute.TotalPrice DKK</div>
		</div>
	}
}


@code {
	string FromCity = "Copenhagen", ToCity = "London";
	DateTime Outbound = DateTime.Today.AddDays(7);
	int AdultCount = 1;
	int ChildCount = 0;

	List<FlightRoute>? FlightRoutes;
	string? ErrorMessage;

	int? SelectedFlightRoutIndex;
	FlightRoute? SelectedFlightRoute =>
		SelectedFlightRoutIndex.HasValue
				? FlightRoutes[SelectedFlightRoutIndex.Value]
				: null;


	// Performs a flight search using city names
	async Task Search()
	{
		// Reset state before search
		ErrorMessage = null;
		FlightRoutes = null;
		SelectedFlightRoutIndex = null; // Reset selection on each new search

		// Look up airport codes based on user input
		if (!CityAirportMap.Map.TryGetValue(FromCity, out var fromAirports)) //if it gets a match, it saves it to fromAirports else set errormessage
		{
			ErrorMessage = $"Origin city “{FromCity}” is not supported.";
			return;
		}
		if (!CityAirportMap.Map.TryGetValue(ToCity, out var toAirports)) //if it gets a match, it saves it to toAirports else set errormessage
		{
			ErrorMessage = $"Destination city “{ToCity}” is not supported.";
			return;
		}

		// Pass comma-separated Airport codes to the API
		string fromParam = string.Join(",", fromAirports);
		string toParam = string.Join(",", toAirports);

		// Request flight offers from the external API
		FlightRoutes = await FlightService.SearchAsync(
			fromParam,
			toParam,
			Outbound,
			AdultCount,
			ChildCount);
	}
}
