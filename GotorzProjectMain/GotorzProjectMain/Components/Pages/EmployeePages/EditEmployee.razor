@page "/employees/edit"
@using AutoMapper
@using GotorzProjectMain.Components.UserComponents
@using GotorzProjectMain.Data
@using GotorzProjectMain.InputModels.Users.EmployeeInputModels
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using GotorzProjectMain.Models
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject Services.IExtendedUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject IWebHostEnvironment WebHostEnvironment
@inject IMapper Mapper
@inject ILogger<EditEmployee> Logger

@attribute [Authorize(Policy = "Admin")]

@rendermode InteractiveServer

<PageTitle>Edit Employee</PageTitle>

<h1>Edit Employee</h1>

<hr />
<hr />
@if (Employee == null || Employee.User == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm EditContext="_ec" OnValidSubmit="UpdateEmployee" FormName="edit">
				<DataAnnotationsValidator />

				<div class="mb-3">
					<label for="first-name" class="form-label">First Name:</label>
					<InputText id="first-name" @bind-Value="Input.FirstName" class="form-control" />
				</div>

				<div class="mb-3">
					<label for="last-name" class="form-label">Last Name:</label>
					<InputText id="last-name" @bind-Value="Input.LastName" class="form-control" />
				</div>

				<div class="mb-3">
					<label for="username" class="form-label">Username:</label>
					<InputText id="username" @bind-Value="Input.CustomUsername" class="form-control" />
				</div>

				<div class="mb-3">
					<label for="email" class="form-label">Email:</label>
					<InputText id="email" @bind-Value="Input.Email" class="form-control" />
				</div>

				<!-- Optional phone number with fallback to null on blur -->
				<div class="mb-3">
					<label for="phone" class="form-label">Phone:</label>
					<InputText id="phone" @bind-Value="Input.Phone" class="form-control" aria-required="true" onblur="@((FocusEventArgs e) => { if (string.IsNullOrWhiteSpace(Input.Phone)) { Input.Phone = null; _ec.Validate(); }})" />
				</div>

				<!-- Admin checkbox toggle -->
				<div class="mb-3">
					<div class="form-check">
						<InputCheckbox id="is-admin" @bind-Value="Input.IsAdmin" class="form-check-input" />
						<label for="is-admin" class="form-check-label">Is Admin</label>
					</div>
				</div>

				<!-- Component to upload a new profile picture -->
				<EmployeeProfilePicturePreview @bind-ProfilePictureFile="Input.ProfilePictureFile" />

				<!-- If no new picture uploaded, show existing one -->
				@if (Input.ProfilePictureFile is null)
				{
					<img src="@Employee.ProfilePicture"
					alt="Profile picture"
					style="max-width:200px; max-height:200px;"
					class="img-thumbnail" />
				}

				<button type="submit" class="btn btn-primary">Save</button>

				@if (!string.IsNullOrWhiteSpace(ErrorMessage))
				{
					<div class="alert alert-danger mt-3" role="alert">
						@ErrorMessage
					</div>
				}
			</EditForm>
		</div>
	</div>
}

<div>
	<a href="/employees">Back to List</a>
</div>

@code {
	[SupplyParameterFromQuery]
	private string? Id { get; set; }
	private EmployeeBaseInputModel Input { get; set; } = new();
	private Employee? Employee { get; set; }
	private string? ErrorMessage { get; set; }
	private EditContext? _ec;
	private bool _imageSavedToFile;
	private string? _oldProfilePicturePath;
	private byte[]? _oldProfilePicture;

	protected override async Task OnInitializedAsync()
	{
		_ec = new EditContext(Input);

		// Fetch the employee by ID in the query string
		Employee = await UserService.GetEmployeeByIdAsync(Id);

		if (Employee == null)
		{
			NavigationManager.NavigateTo("/employees"); // Redirect if not found
			return;
		}
		else
		{
			Mapper.Map(Employee, Input); // Map to input model
		}

		// Load the old profile picture if it exists
		if (Employee.ProfilePicture is not null)
		{
			_oldProfilePicturePath = Employee.ProfilePicture;
			var relativePath = _oldProfilePicturePath.TrimStart('/');
			var filePath = Path.Combine(WebHostEnvironment.WebRootPath, relativePath.Replace('/', Path.DirectorySeparatorChar));
			_oldProfilePicture = await File.ReadAllBytesAsync(filePath);
		}
	}

	// Save changes to employee data
	private async Task UpdateEmployee()
	{
		try
		{
			// If email changed, update related vacation offers to keep consistency
			if (Input.Email != Employee!.User.Email)
			{
				var oldEmail = Employee.User.Email;
				var newEmail = Input.Email;

				foreach (var vacationOffer in Context.VacationOffers.Where(v => v.EmployeeEmail == oldEmail))
				{
					vacationOffer.EmployeeEmail = newEmail;
				}
			}

			// Copy input back into Employee
			Mapper.Map(Input, Employee);


			// If new profile picture was uploaded, save it
			if (Input.ProfilePictureFile != null)
			{

				string? newPath = await SaveProfilePicture(Input.ProfilePictureFile);
				Employee.ProfilePicture = newPath;
				_imageSavedToFile = true;
			}

			await Context.SaveChangesAsync();

			// Remove the old profile picture from project
			if (_oldProfilePicturePath != "/images/DefaultProfilePicture.jpg")
			{
				DeleteOldProfilePicture();
			}

			NavigationManager.NavigateTo("/employees");
		}
		catch (DbUpdateConcurrencyException ex)
		{
			// Restore old image if concurrency conflict occurs
			if (_imageSavedToFile == true)
			{
				Employee!.ProfilePicture = _oldProfilePicturePath;

				if (_oldProfilePicturePath != "/images/DefaultProfilePicture.jpg")
				{
					await File.WriteAllBytesAsync(_oldProfilePicturePath!, _oldProfilePicture!);
				}				
			}

			ErrorMessage = "Another user has modified this data since you started editing. Your changes were not saved. Please reload and try again.";
			Logger.LogWarning(ex, ErrorMessage);
		}
		catch (Exception ex)
		{
			// Restore old image in case of unexpected failure
			if (_imageSavedToFile == true)
			{
				Employee!.ProfilePicture = _oldProfilePicturePath;

				if (_oldProfilePicturePath != "/images/DefaultProfilePicture.jpg")
				{
					await File.WriteAllBytesAsync(_oldProfilePicturePath!, _oldProfilePicture!);
				}
			}

			ErrorMessage = "An unexpected error occurred. Please try again.";
			Logger.LogError(ex, ErrorMessage);
		}
	}

	// Saves uploaded profile picture to /wwwroot/images
	private async Task<string?> SaveProfilePicture(IBrowserFile file)
	{
		try
		{
			var fileName = $"{Guid.NewGuid()}{ Path.GetFileName(file.Name)}";
			var imagesFolder = Path.Combine(WebHostEnvironment.WebRootPath, "images");

			// Ensure the images folder exists
			if (!Directory.Exists(imagesFolder))
			{
				Directory.CreateDirectory(imagesFolder);
			}

			var filePath = Path.Combine(imagesFolder, fileName);

			using (var stream = new FileStream(filePath, FileMode.Create))
			{
				await file.OpenReadStream().CopyToAsync(stream);
			}

			string relativePath = "/images/" + fileName;
			return relativePath;
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Failed to save profile picture.");
			throw;
		}
	}

	// Deletes previous profile picture file from project
	private void DeleteOldProfilePicture()
	{
		if (_oldProfilePicturePath == null) return;

		try
		{
			var relativePath = _oldProfilePicturePath.ToString().TrimStart('/');
			var fullPath = Path.Combine(WebHostEnvironment.WebRootPath, relativePath.Replace('/', Path.DirectorySeparatorChar));

			if (File.Exists(fullPath))
			{
				File.Delete(fullPath);
				Logger.LogInformation($"Deleted old profile picture at {fullPath}");
			}
			else
			{
				Logger.LogWarning($"Tried to delete profile picture, but file was not found: {fullPath}");
			}
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, $"Failed to delete old profile picture: {_oldProfilePicturePath}");
		}
	}
}
