@page "/employees/delete"
@using GotorzProjectMain.Data
@using GotorzProjectMain.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using GotorzProjectMain.Models
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject Services.IExtendedUserService UserService
@inject ApplicationDbContext Context
@inject ILogger<RemoveEmployee> Logger
@inject ICurrentUserService CurrentUserService

@attribute [Authorize(Policy = "Admin")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
	<hr />
	@if (employee is null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<h2>@employee.User.FirstName @employee.User.LastName</h2>

		<dl class="row">
			<dd class="col-sm-10">
				@if (employee.ProfilePicture != null)
				{
					<img src="@employee.ProfilePicture"
						 alt="Profile"
						 style="max-width:200px; max-height:200px;"
						 class="img-thumbnail" />
				}
				else
				{
					<span>No picture available.</span>
				}
			</dd>
		</dl>
		<dl class="row">
			<dt class="col-sm-2">First Name</dt>
			<dd class="col-sm-10">@employee.User.FirstName</dd>
			<dt class="col-sm-2">Last Name</dt>
			<dd class="col-sm-10">@employee.User.LastName</dd>
			<dt class="col-sm-2">Username</dt>
			<dd class="col-sm-10">@employee.CustomUserName</dd>
			<dt class="col-sm-2">Email</dt>
			<dd class="col-sm-10">@employee.User.Email</dd>
			<dt class="col-sm-2">Phone Number</dt>
			<dd class="col-sm-10">@employee.User.PhoneNumber</dd>
			<dt class="col-sm-2">Role</dt>
			<dd class="col-sm-10">@employee.IsAdmin</dd>
		</dl>
		<EditForm method="post" Model="employee" OnValidSubmit="DeleteEmployee" FormName="delete" Enhance>
			<button type="submit" class="btn btn-danger" disabled="@(employee is null)">Delete</button> |
			<a href="/employees">Back to List</a>
		</EditForm>
	}
	@if (!string.IsNullOrWhiteSpace(_errorMessage))
	{
		<div class="alert alert-danger mt-3" role="alert">
			@_errorMessage
		</div>
	}
</div>

@code {
	private Employee? employee;

	[SupplyParameterFromQuery]
	private string Id { get; set; }
	private string? _errorMessage;

	protected override async Task OnInitializedAsync()
	{
		employee = await UserService.GetEmployeeByIdAsync(Id);

		if (employee is null)
		{
			NavigationManager.NavigateTo("notfound");
		}
	}

	private async Task DeleteEmployee()
	{
		try
		{
			// Get the current user
			string? userId = await CurrentUserService.GetUserIdAsync()
											?? throw new InvalidOperationException("User not authenticated");

			// Check if admin is trying to selfdestruct.
			if (Id == userId)
			{
				_errorMessage = "Admin can't delete own profile. Delete from another admin profile";
				return;
			}

			if (employee is not null)
			{
				// 🔥 Load the ApplicationUser
				var user = await Context.Users.FirstOrDefaultAsync(u => u.Id == employee.Id);

				if (user is not null)
				{
					Context.Users.Remove(user); // Delete the Identity user
				}

				Context.Employees.Remove(employee); // Delete the Customer
				await Context.SaveChangesAsync();
			}
		}
		catch (DbUpdateConcurrencyException ex)
		{
			_errorMessage = "Another user has modified this data since you started editing. Your changes were not saved. Please reload and try again.";
			Logger.LogWarning(ex, _errorMessage);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error deleting employee: {ex.Message}");
		}

		NavigationManager.NavigateTo("/employees");
	}
}
