@page "/vacationrequests"
@rendermode InteractiveServer

@implements IDisposable

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using GotorzProjectMain.Models
@using GotorzProjectMain.Data
@using GotorzProjectMain.Services
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims

@inject ApplicationDbContext Context
@inject IExtendedUserService ExtendedUserService
@inject NavigationManager NavigationManager
@inject ICurrentUserService CurrentUserService
@inject IVRNotifierService VrNotifier


@attribute [Authorize]

<PageTitle>Index</PageTitle>

<h1>Vacation Requests</h1>

<p>
    <a href="vacationrequests/create">Create New</a>
</p>

<QuickGrid Class="table" Items="vacationRequests.AsQueryable()">
    <TemplateColumn Context="vacationrequest" Title="User Email">
        @{
            var email = customers
            .FirstOrDefault(c => c.User?.Id == vacationrequest.CustomerId)
            ?.User?.Email ?? "Unknown";
        }
        @email
    </TemplateColumn>

    <PropertyColumn Property="vacationrequest => vacationrequest.DepartureCity" Title="Departure City" />
    <PropertyColumn Property="vacationrequest => vacationrequest.DepartureCountry" Title="Departure Country" />
    <PropertyColumn Property="vacationrequest => vacationrequest.ArrivalCity" Title="Arrival City" />
    <PropertyColumn Property="vacationrequest => vacationrequest.ArrivalCountry" Title="Arrival Country" />

    <TemplateColumn Context="vacationrequest" Title="Start Date">
        @vacationrequest.StartDate.ToString("MMM dd, yyyy")
    </TemplateColumn>

    <TemplateColumn Context="vacationrequest" Title="End Date">
        @vacationrequest.EndDate.ToString("MMM dd, yyyy")
    </TemplateColumn>
    <PropertyColumn Property="vacationrequest => vacationrequest.Status" />


    <TemplateColumn Context="vacationrequest">
        <a href="@($"vacationrequests/edit?vacationrequestid={vacationrequest.VacationRequestId}")">Edit</a> |
        <a href="@($"vacationrequests/details?vacationrequestid={vacationrequest.VacationRequestId}")">Details</a> |
        <a href="@($"vacationrequests/delete?vacationrequestid={vacationrequest.VacationRequestId}")">Delete</a> |
        @if (isEmployee)
        {
            <a href="@($"vacationrequests/details?vacationrequestid={vacationrequest.VacationRequestId}&employeeid={userId}")">Create Offer</a>

        }
    </TemplateColumn>
</QuickGrid>
@code {

    private List<VacationRequest> vacationRequests = new();
    private List<Customer> customers = new();
    private bool isEmployee;
    private string? userId;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // Determine current user and role
        userId = await CurrentUserService.GetUserIdAsync();
        isEmployee = await CurrentUserService.IsEmployeeAsync();

        await LoadDataAsync();

        // Subscribe to vacation request update notifications
        VrNotifier.OnChanged += HandleChanged;
    }

    // Called when the vacation request list changes
    private async Task HandleChanged()
    {
        await LoadDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    // Loads vacation requests and associated customer data
    private async Task LoadDataAsync()
    {
        // Load requests -  all for employees, only own for customers
        if (isEmployee)
        {
            vacationRequests = await Context.VacationRequests.ToListAsync();
        }
        else
        {
            vacationRequests = await Context.VacationRequests
                .Where(v => v.CustomerId == userId)
                .ToListAsync();
        }
		// Load customers
        customers = await ExtendedUserService.GetCustomersWithUsersAsync();
    }

    // Unsubscribe from notifications when component is disposed to avoid memory leaks
    public void Dispose()
    {
        VrNotifier.OnChanged -= HandleChanged;
    }
}
