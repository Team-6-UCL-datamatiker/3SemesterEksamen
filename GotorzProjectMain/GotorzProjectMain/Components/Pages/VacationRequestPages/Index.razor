@page "/vacationrequests"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using GotorzProjectMain.Models
@using GotorzProjectMain.Data
@using GotorzProjectMain.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IUserService ExtendedUserService
@inject NavigationManager NavigationManager
@inject VacationRequestSignalRService SignalRService

@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>
@* For debugging *@
<p>Last updated: @lastUpdated.ToLongTimeString()</p>

<p>
    <a href="vacationrequests/create">Create New</a>
</p>

<QuickGrid Class="table" Items="vacationRequests.AsQueryable()">
    <TemplateColumn Context="vacationrequest" Title="User Email">
        @{
            var email = customers
                .FirstOrDefault(c => c.User?.Id == vacationrequest.UserId)
                ?.User?.Email ?? "Unknown";
        }
        @email
    </TemplateColumn>
    <PropertyColumn Property="vacationrequest => vacationrequest.Country"/>
    <TemplateColumn Context="vacationrequest" Title="Start Date">
        @vacationrequest.StartDate.ToString("MMM dd, yyyy")
    </TemplateColumn>

    <TemplateColumn Context="vacationrequest" Title="End Date">
        @vacationrequest.EndDate.ToString("MMM dd, yyyy")
    </TemplateColumn>
    <PropertyColumn Property="vacationrequest => vacationrequest.Status"/>
    

    <TemplateColumn Context="vacationrequest">
        <a href="@($"vacationrequests/edit?vacationrequestid={vacationrequest.VacationRequestId}")">Edit</a> |
        <a href="@($"vacationrequests/details?vacationrequestid={vacationrequest.VacationRequestId}")">Details</a> |
        <a href="@($"vacationrequests/delete?vacationrequestid={vacationrequest.VacationRequestId}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
@code {

    private bool _connected = false;
    
    //For debugging
    private DateTime lastUpdated = DateTime.Now;
    
    private ApplicationDbContext context = default!;
    private List<VacationRequest> vacationRequests = new();
    private List<Customer> customers = new();
    
    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        await LoadDataAsync();

        await SignalRService.InitializeAsync();
        
        SignalRService.OnVacationRequestReceived += async () =>
        {
            Console.WriteLine("🔥 Handler started");
            await LoadDataAsync();
            Console.WriteLine("✅ Handler finished LoadDataAsync()");
            lastUpdated = DateTime.Now;
            StateHasChanged();
        };

        Console.WriteLine("🔗 SignalR event handler attached in Index.razor");

// ✅ Check if we missed an update
        _ = Task.Run(async () =>
        {
            await Task.Delay(500); // small delay to allow signal to arrive and be deferred
            if (SignalRService.HasMissedUpdate)
            {
                Console.WriteLine("💡 Missed update detected. Reloading manually.");
                await InvokeAsync(async () =>
                {
                    await LoadDataAsync();
                    SignalRService.ClearMissedUpdate();
                    Console.WriteLine("🧹 Missed update handled.");
                });
            }
        });
    }
    
    private async Task LoadDataAsync()
    {
        Console.WriteLine("📦 Starting LoadDataAsync()");
        var newList = await context.VacationRequests.ToListAsync();
        vacationRequests = new List<VacationRequest>(newList); // 🔁 Force new reference
        customers = await ExtendedUserService.GetCustomersWithUsersAsync();

        lastUpdated = DateTime.Now;
        Console.WriteLine("Data reloaded at " + lastUpdated);
    }

    
}
