@page "/vacationrequests"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using GotorzProjectMain.Models
@using GotorzProjectMain.Data
@using GotorzProjectMain.Services
@implements IAsyncDisposable
@inject IDbContextFactory<GotorzProjectMain.Data.ApplicationDbContext> DbFactory
@inject IUserService ExtendedUserService

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="vacationrequests/create">Create New</a>
</p>

<QuickGrid Class="table" Items="vacationRequests.AsQueryable()">
    <TemplateColumn Context="vacationrequest" Title="User Email">
        @{
            var email = customers
                .FirstOrDefault(c => c.User?.Id == vacationrequest.UserId)
                ?.User?.Email ?? "Unknown";
        }
        @email
    </TemplateColumn>
    <PropertyColumn Property="vacationrequest => vacationrequest.Country"/>
    <TemplateColumn Context="vacationrequest" Title="Start Date">
        @vacationrequest.StartDate.ToString("MMM dd, yyyy")
    </TemplateColumn>

    <TemplateColumn Context="vacationrequest" Title="End Date">
        @vacationrequest.EndDate.ToString("MMM dd, yyyy")
    </TemplateColumn>
    <PropertyColumn Property="vacationrequest => vacationrequest.Status"/>
    

    <TemplateColumn Context="vacationrequest">
        <a href="@($"vacationrequests/edit?vacationrequestid={vacationrequest.VacationRequestId}")">Edit</a> |
        <a href="@($"vacationrequests/details?vacationrequestid={vacationrequest.VacationRequestId}")">Details</a> |
        <a href="@($"vacationrequests/delete?vacationrequestid={vacationrequest.VacationRequestId}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private ApplicationDbContext context = default!;
    private List<VacationRequest> vacationRequests = new();
    private List<Customer> customers = new();
    
    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        vacationRequests = await context.VacationRequests
            .ToListAsync();
        customers = await ExtendedUserService.GetCustomersWithUsersAsync();

    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
