@page "/vacationrequests/create"
@using GotorzProjectMain.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using GotorzProjectMain.Models
@using GotorzProjectMain.Services
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject VacationRequestSignalRService SignalRService

@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>VacationRequest</h2>
<hr />
<div class="row">
	<div class="col-md-4">
		<EditForm method="post" Model="VacationRequest" OnValidSubmit="AddVacationRequest" FormName="create" Enhance>
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" role="alert" />

			@* Custom error message *@
			@if (!string.IsNullOrEmpty(FormErrorMessage))
			{
				<div class="alert alert-danger" role="alert">@FormErrorMessage</div>
			}

			@* If the logged-in user is an employee, allow entering a customer email *@
			@if (IsEmployee)
			{
				<div class="mb-3">
					<label for="customerEmail" class="form-label">Customer Email:</label>
					<InputText id="customerEmail" @bind-Value="CustomerEmail" @bind-Value:event="oninput" class="form-control" />
					<ValidationMessage For="() => CustomerEmail" class="text-danger" />
				</div>
			}

			<div class="mb-3">
				<label for="country" class="form-label">Country:</label>
				<InputText id="country" @bind-Value="VacationRequest.Country" class="form-control" />
				<ValidationMessage For="() => VacationRequest.Country" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="startdate" class="form-label">StartDate:</label>
				<InputDate id="startdate" @bind-Value="VacationRequest.StartDate" class="form-control" />
				<ValidationMessage For="() => VacationRequest.StartDate" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="enddate" class="form-label">EndDate:</label>
				<InputDate id="enddate" @bind-Value="VacationRequest.EndDate" class="form-control" />
				<ValidationMessage For="() => VacationRequest.EndDate" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="childrenamount" class="form-label">ChildrenAmount:</label>
				<InputNumber id="childrenamount" @bind-Value="VacationRequest.ChildrenAmount" class="form-control" />
				<ValidationMessage For="() => VacationRequest.ChildrenAmount" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="adultsamount" class="form-label">AdultsAmount:</label>
				<InputNumber id="adultsamount" @bind-Value="VacationRequest.AdultsAmount" class="form-control" />
				<ValidationMessage For="() => VacationRequest.AdultsAmount" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="roomsamount" class="form-label">RoomsAmount:</label>
				<InputNumber id="roomsamount" @bind-Value="VacationRequest.RoomsAmount" class="form-control" />
				<ValidationMessage For="() => VacationRequest.RoomsAmount" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="hotelrequest" class="form-label">HotelRequest:</label>
				<InputText id="hotelrequest" @bind-Value="VacationRequest.HotelRequest" class="form-control" />
				<ValidationMessage For="() => VacationRequest.HotelRequest" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="flightrequest" class="form-label">FlightRequest:</label>
				<InputText id="flightrequest" @bind-Value="VacationRequest.FlightRequest" class="form-control" />
				<ValidationMessage For="() => VacationRequest.FlightRequest" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="misc" class="form-label">Misc:</label>
				<InputText id="misc" @bind-Value="VacationRequest.Misc" class="form-control" />
				<ValidationMessage For="() => VacationRequest.Misc" class="text-danger" />
			</div>
			<button type="submit" class="btn btn-primary">Create</button>
		</EditForm>
	</div>
</div>

<div>
	<a href="/vacationrequests">Back to List</a>
</div>

@code {
	[SupplyParameterFromForm]
	private VacationRequest VacationRequest { get; set; } = new();
	[SupplyParameterFromForm]
	private string? CustomerEmail { get; set; }

	private bool IsEmployee { get; set; }

	// For custom error message
	private string? FormErrorMessage { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		var authState = await authenticationStateTask;
		// Returns the claim of the current user
		var user = authState.User;

		// Searches for UserID
		var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
									?? throw new InvalidOperationException("User not authenticated");

		// Determine if current user is an employee
		IsEmployee = await DbContext.Employees.AnyAsync(e => e.Id == userId);


		// If customer, set userid now
		if (!IsEmployee)
		{
			VacationRequest.UserId = userId;
		}

	}

	// To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
	private async Task AddVacationRequest()
	{
		// For employee: find customer by email
		if (IsEmployee)
		{
			if (string.IsNullOrWhiteSpace(CustomerEmail))
			{
				FormErrorMessage = "Customer email is required.";
				return;
			}

			var customerUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == CustomerEmail);

			// if no customer with that email is found
			if (customerUser == null)
			{
				FormErrorMessage = $"Customer with email '{CustomerEmail}' not found.";
				return;
			}

			VacationRequest.UserId = customerUser.Id;
		}

			DbContext.VacationRequests.Add(VacationRequest);
			await DbContext.SaveChangesAsync();

			await SignalRService.InitializeAsync(); // ✅ Make sure connection is started
			await Task.Delay(1000);
			await SignalRService.SendVacationRequestAsync(); // ✅ Then send the message

			NavigationManager.NavigateTo("/vacationrequests");
	}
}
