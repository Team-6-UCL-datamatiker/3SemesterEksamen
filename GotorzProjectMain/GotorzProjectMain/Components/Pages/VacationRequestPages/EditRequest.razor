@page "/vacationrequests/edit"

@using AutoMapper
@using GotorzProjectMain.InputModels.VacationRequestInputModels
@using Microsoft.EntityFrameworkCore
@using GotorzProjectMain.Models
@using GotorzProjectMain.Services

@inject GotorzProjectMain.Data.ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject IExtendedUserService ExtendedUserService
@inject IMapper Mapper
@inject IVRNotifierService VrNotifier

@inject ILogger<EditRequest> Logger
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>VacationRequest</h2>
<hr />
@if (VacationRequest is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm Model="InputModel" OnValidSubmit="UpdateVacationRequest" FormName="edit" Enhance>
				<DataAnnotationsValidator />
				<ValidationSummary role="alert" />
				<div class="mb-3">
					<label for="departureCity" class="form-label">Departure City:</label>
					<InputText id="departureCity" @bind-Value="InputModel.DepartureCity" class="form-control" />
					<ValidationMessage For="() => InputModel.DepartureCity" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="departureCountry" class="form-label">Departure Country:</label>
					<InputText id="departureCountry" @bind-Value="InputModel.DepartureCountry" class="form-control" />
					<ValidationMessage For="() => InputModel.DepartureCountry" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="arrivalCity" class="form-label">Arrival City:</label>
					<InputText id="arrivalCity" @bind-Value="InputModel.ArrivalCity" class="form-control" />
					<ValidationMessage For="() => InputModel.ArrivalCity" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="arrivalCountry" class="form-label">Arrival Country:</label>
					<InputText id="arrivalCountry" @bind-Value="InputModel.ArrivalCountry" class="form-control" />
					<ValidationMessage For="() => InputModel.ArrivalCountry" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="startdate" class="form-label">StartDate:</label>
					<InputDate id="startdate" @bind-Value="InputModel.StartDate" class="form-control" />
					<ValidationMessage For="() => InputModel.StartDate" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="enddate" class="form-label">EndDate:</label>
					<InputDate id="enddate" @bind-Value="InputModel.EndDate" class="form-control" />
					<ValidationMessage For="() => InputModel.EndDate" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="childrenamount" class="form-label">ChildrenAmount:</label>
					<InputNumber id="childrenamount" @bind-Value="InputModel.ChildrenAmount" class="form-control" />
					<ValidationMessage For="() => InputModel.ChildrenAmount" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="adultsamount" class="form-label">AdultsAmount:</label>
					<InputNumber id="adultsamount" @bind-Value="InputModel.AdultsAmount" class="form-control" />
					<ValidationMessage For="() => InputModel.AdultsAmount" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="roomsamount" class="form-label">RoomsAmount:</label>
					<InputNumber id="roomsamount" @bind-Value="InputModel.RoomsAmount" class="form-control" />
					<ValidationMessage For="() => InputModel.RoomsAmount" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="hotelrequest" class="form-label">HotelRequest:</label>
					<InputText id="hotelrequest" @bind-Value="InputModel.HotelRequest" class="form-control" />
					<ValidationMessage For="() => InputModel.HotelRequest" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="flightrequest" class="form-label">FlightRequest:</label>
					<InputText id="flightrequest" @bind-Value="InputModel.FlightRequest" class="form-control" />
					<ValidationMessage For="() => InputModel.FlightRequest" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="misc" class="form-label">Misc:</label>
					<InputText id="misc" @bind-Value="InputModel.Misc" class="form-control" />
					<ValidationMessage For="() => InputModel.Misc" class="text-danger" />

				</div>
				<div class="mb-3">
					<label class="form-label">Customer Email:</label>
					<input type="text" class="form-control" value="@Customer?.User?.Email" readonly />
				</div>
				<button type="submit" class="btn btn-primary">Save</button>
			</EditForm>
		</div>
	</div>
}

<div>
	<a href="/vacationrequests">Back to List</a>
</div>

@code {
	private string? errorMessage;
	private Customer? Customer { get; set; }

	[SupplyParameterFromQuery(Name = "vacationrequestid")]
	private int VacationRequestId { get; set; }

	private VacationRequestBaseInputModel InputModel { get; set; } = new();

	private VacationRequest? VacationRequest { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			VacationRequest ??= await Context.VacationRequests.FirstOrDefaultAsync(m => m.VacationRequestId == VacationRequestId);

			if (VacationRequest is null)
			{
				NavigationManager.NavigateTo("notfound");
				return;
			}
			Mapper.Map(VacationRequest, InputModel);
			Customer = await ExtendedUserService.GetCustomerByIdAsync(VacationRequest.CustomerId);
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred while loading the vacation request details.";
			Logger.LogError(ex, errorMessage);
			NavigationManager.NavigateTo("error");
		}
	}

	private async Task UpdateVacationRequest()
	{
		try
		{
			Mapper.Map(InputModel, VacationRequest);
			await Context.SaveChangesAsync();

			// Index notification
			await VrNotifier.NotifyChangedAsync();

			NavigationManager.NavigateTo("/vacationrequests");

		}
		catch (DbUpdateConcurrencyException)
		{
			if (!VacationRequestExists(VacationRequest!.VacationRequestId))
			{
				NavigationManager.NavigateTo("notfound");
			}
			else
			{
				throw;
			}
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred while updating the vacation request.";
			Logger.LogError(ex, errorMessage);
			NavigationManager.NavigateTo("error");
		}

	}

	private bool VacationRequestExists(int vacationrequestid)
	{
		try
		{
			return Context.VacationRequests.Any(e => e.VacationRequestId == vacationrequestid);
		}
		catch (Exception ex)
		{
			errorMessage = "An error occurred while checking the vacation request existence.";
			Logger.LogError(ex, errorMessage);
			return false;
		}
	}
}
