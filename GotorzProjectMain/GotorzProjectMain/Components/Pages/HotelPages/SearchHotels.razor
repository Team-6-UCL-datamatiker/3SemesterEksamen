@page "/hotelsearch"
@rendermode InteractiveServer

@using GotorzProjectMain.Models
@using GotorzProjectMain.Services.APIs
@using GotorzProjectMain.Services.APIs.HotelAPIs

@inject IAmadeusHotelAPIService Service
@inject ICityLookupService CityLookupService

<PageTitle>Search Hotels</PageTitle>

<div class="row">
	<div class="col-md-4">
		@* fjernet valid *@
		<EditForm EditContext="_ecList" FormName="listHotels">
			<DataAnnotationsValidator />
			<h2>Search for hotels</h2>

			<div data-role="Airport" class="form-check mb-3">
				<InputCheckbox id="isAirport" @bind-Value="_airport" class="form-check-input" />
				<label for="isAirport" class="form-check-label">Airport code</label>
			</div>

			<div data-role="Destination" class="mb-3 form-floating position-relative">
				<InputText id="destination" placeholder="City" autocomplete="off" class="form-control" @bind-Value="_destination" oninput="@(async (ChangeEventArgs e) => await OnDestinationInput(e))" @onkeydown="HandleDestinationKeyPress" />
				<label for="destination">Destination:</label>
				@* 				<ValidationMessage For="() => Input." class="alert alert-danger mt-3" /> *@

				@if (DestinationSuggestions.Any() && _destination != "")
				{
					<ul class="list-group position-absolute mt-1 w-100" style="z-index:1000;">
						@foreach (string suggestion in DestinationSuggestions)
						{
							<li class="list-group-item list-group-item-action" @onclick="() => SelectDestination(suggestion)">
								@suggestion
							</li>
						}
					</ul>
				}

				@if (!string.IsNullOrWhiteSpace(_selectedDestination))
				{
					<div class="alert alert-success mt-3" role="alert">
						@_selectedDestination
					</div>
				}

				@if (!string.IsNullOrWhiteSpace(_matchAlertMessage))
				{
					<div class="alert alert-danger mt-3" role="alert">
						@_matchAlertMessage
					</div>
				}
			</div>

			<div data-role="Radius" class="form-floating mb-3">
				<InputNumber id="radius" @bind-Value="_inputList.Radius" class="form-control" placeholder="Radius" />
				<label for="radius">Search Radius</label>
				@* 				<ValidationMessage For="() => Input.Radius" class="alert alert-danger mt-3" /> *@
			</div>

			<div data-role="Radius Unit" class=" mb-3">
				<select id="radius-unit" @bind="_inputList.RadiusUnit" class="form-select">
					<option value="KM">KM</option>
					<option value="MILE">MILE</option>
				</select>
			</div>

			@* Har ikke tilføjet Chaincodes endnu - Hvis man vil søge på hotelkæder, skal det tilføjes *@

			<div data-role="Amenities" class="form-floating mb-3 position-relative">
				<InputText id="amenities" @bind-Value="_amenityInput" oninput="@(async (ChangeEventArgs e) => await OnAmenitiesInput(e))" @onkeydown="HandleAmenityKeyPress" class="form-control" autocomplete="off" placeholder="Amenities" />
				<label for="amenities">Add Amenities</label>
				@* 				<ValidationMessage For="() => Input.Amenities" class="alert alert-danger mt-3" /> *@

				@if (!string.IsNullOrWhiteSpace(_amenitiesMessage))
				{
					<div class="alert alert-danger mt-3" role="alert">
						@_amenitiesMessage
					</div>
				}

				@if (AmenitiesSuggestions.Any() && _amenityInput != "")
				{
					<ul class="list-group position-absolute mt-1 w-100" style="z-index:1000;">
						@foreach (string suggestion in AmenitiesSuggestions)
						{
							<li class="list-group-item list-group-item-action" @onclick="() => SelectAmenity(suggestion)">
								@suggestion
							</li>
						}
					</ul>
				}

				@if (_inputList.Amenities.Any())
				{
					<div>
						<ul class="alert alert-success mt-3">
							@foreach (var amenity in _inputList.Amenities)
							{
								<li>@amenity</li>
							}
						</ul>
					</div>
				}
			</div>

			<div data-role="Hotel Stars" class="mb-3">
				<label class="form-label">Hotel Stars</label>
				<div class="d-flex gap-3">
					@for (int star = 1; star <= 5; star++)
					{
						string starValue = star.ToString();

						<div class="form-check">
							<input class="form-check-input"
								   type="checkbox"
								   value="@starValue"
								   @onchange="e => ToggleRating(starValue, e.Value)" />
							<label class="form-check-label">@star</label>
						</div>
					}
				</div>
			</div>

			@* Man kan bestemme hvilken kilde man vil søge i - har ikke taget det med endnu.
			   Ved ikke helt hvad det er for noget, men hvis man vil det, skal det tilføjes *@
		</EditForm>
	</div>
	<div class="col-md-4">
		<EditForm EditContext="_ecSearch" FormName="searchHotels">
			<DataAnnotationsValidator />
			<div class="mt-5"></div>

			<div data-role="Adults" class="form-check mb-3">
				<label for="adults">Adults</label>
				<InputNumber id="adults" @bind-Value="_inputSearch.Adults" class="form-control" placeholder="Adults" />
				<ValidationMessage For="() => _inputSearch.Adults" class="alert alert-danger mt-3" />
			</div>

			<div data-role="CheckIn" class="form-check mb-3">
				<label for="checkInDate">Checkin Date:</label>
				<InputDate id="checkInDate" @bind-Value="_inputSearch.CheckInDate" class="form-control" />
				<ValidationMessage For="() => _inputSearch.CheckInDate" class="text-danger" />
			</div>

			<div data-role="CheckOut" class="form-check mb-3">
				<label for="checOutDate">Checkout Date:</label>
				<InputDate id="checkOutDate" @bind-Value="_inputSearch.CheckOutDate" class="form-control" />
				<ValidationMessage For="() => _inputSearch.CheckOutDate" class="text-danger" />
			</div>

			@* Skipped country of residence *@

			<div data-role="Rooms" class="form-check mb-3">
				<label for="rooms">Rooms</label>
				<InputNumber id="rooms" @bind-Value="_inputSearch.RoomQuantity" class="form-control" placeholder="Rooms" />
				<ValidationMessage For="() => _inputSearch.RoomQuantity" class="alert alert-danger mt-3" />
			</div>

			<div data-role="Price" class="form-check mb-3">
				<label for="price">Price</label>
				<InputText id="price" @bind-Value="_inputSearch.PriceRange" placeholder="Price" autocomplete="off" class="form-control" />
				<ValidationMessage For="() => _inputSearch.PriceRange" class="alert alert-danger mt-3" />
			</div>

			<div data-role="Currency" class="form-check mb-3">
				<label for="currency">Currency</label>
				<InputText id="currency" @bind-Value="_inputSearch.Currency" placeholder="EUR" autocomplete="off" class="form-control" />
				<ValidationMessage For="() => _inputSearch.Currency" class="alert alert-danger mt-3" />
			</div>

			@* Skipped paymentPolicy *@

			<div data-role="Food" class=" mb-3">
				<select id="food" @bind="_inputSearch.BoardType" class="form-select">
					<option value=""></option>
					<option value="ROOM_ONLY">Room only</option>
					<option value="BREAKFAST">Breakfast</option>
					<option value="HALF_BOARD">Half board</option>
					<option value="FULL_BOARD">Full board</option>
					<option value="ALL_INCLUSIVE">All inclusive</option>
				</select>
			</div>

			@* Skipped 'include sold out, cheapest offer only, language of api descriptions' *@

		</EditForm>
	</div>
	<div class="mt-3"></div>
	<button @onclick="SubmitAll" class="w-100 btn btn-lg btn-primary">Search</button>
</div>

<div class="row">
</div>

@if (_hotelsList.Any())
{
	<div class="mt-3"></div>
	<div>
		<h2>Hotels</h2>
		<hr />

		@if (!string.IsNullOrWhiteSpace(_returnMessage))
		{
			<div class="alert alert-danger mt-3">
				@_returnMessage
			</div>
		}

		@foreach (Hotel hotel in _hotelsList)
		{
			<details style="margin-bottom: 1em;">
				<summary class="fw-bold fs-5">@hotel.Name</summary>
				<dl class="row">
					@if (hotel.Rating is not null)
					{
						<dt class="col-sm-2">Rating</dt>
						<dd class="col-sm-10">@hotel.Rating</dd>
					}
					@if (hotel.Distance is not null)
					{
						<dt class="col-sm-2">Distance</dt>
						<dd class="col-sm-10">@hotel.Distance.Value @hotel.Distance.Unit</dd>
					}
					@if (hotel.Amenities?.Any() == true)
					{
						<dt class="col-sm-2">Amenities</dt>
						<dd class="col-sm-10">
							<ul>
								@foreach (string a in hotel.Amenities)
								{
									<li>@a</li>
								}
							</ul>
						</dd>
					}
				</dl>
			</details>

			@foreach (HotelOffer offer in hotel.Offers)
			{
				<details style="margin-bottom: 1em;">
					<summary class="p-2 rounded" style="background-color: rgba(0, 123, 255, 0.08);">
						@($"{offer.Price.TotalAmount} {offer.Price.Currency}")
					</summary>
					<dl class="row">

						<dt class="col-sm-2">Dates</dt>
						<dd class="col-sm-10">@($"{offer.CheckInDate} - {offer.CheckOutDate}")</dd>

						@if (offer.Price.AverageNightlyAmount is not null)
						{
							<dt class="col-sm-2">Average price per night</dt>
							<dd class="col-sm-10">@($"{offer.Price.AverageNightlyAmount} {offer.Price.Currency}")</dd>
						}

						@if (offer.Guests is not null)
						{
							<dt class="col-sm-2">People</dt>
							<dd class="col-sm-10">@($"{offer.Guests.Adults} adults")</dd>
						}

						@if (offer.Room is not null)
						{
							@if (offer.Room.Type is not null)
							{
								<dt class="col-sm-2">Room</dt>
								<dd class="col-sm-10">@offer.Room.Type</dd>
							}
							@if (offer.Room.Category is not null)
							{
								<dt class="col-sm-2">Category</dt>
								<dd class="col-sm-10">@offer.Room.Category</dd>
							}
							@if (offer.Room.Beds is not null)
							{
								<dt class="col-sm-2">Beds</dt>
								<dd class="col-sm-10">@offer.Room.Beds</dd>
							}
							@if (offer.Room.BedType is not null)
							{
								<dt class="col-sm-2">Bed Type</dt>
								<dd class="col-sm-10">@offer.Room.BedType</dd>
							}
							@if (offer.Room.DescriptionText is not null)
							{
								<dt class="col-sm-2">Description</dt>
								<dd class="col-sm-10">@offer.Room.DescriptionText</dd>
							}
						}

						@if (offer.BoardType is not null)
						{
							<dt class="col-sm-2">Rating</dt>
							<dd class="col-sm-10">@offer.BoardType</dd>
						}


					</dl>
				</details>
			}
		}
	</div>
}


@code {
	// Search API
	private EditContext? _ecSearch;
	private AmadeusHotelSearchParameters _inputSearch = new();

	// List API
	private EditContext? _ecList;
	private AmadeusHotelListParameters _inputList = new();

	private IEnumerable<Hotel> _hotelsList = Enumerable.Empty<Hotel>();
	private string? _destination;
	private List<string> DestinationSuggestions { get; set; } = new();
	private bool _airport = false;
	private string? _matchAlertMessage;
	private string? _selectedDestination;

	private List<string> AmenitiesSuggestions { get; set; } = new();
	private string? _amenitiesMessage;

	private string? _amenityInput;
	private string? _returnMessage;

	// BAR or LOUNGE virker vist ikke................
	private List<string> AllAmenities = new()
	{ "SWIMMING_POOL","SPA","FITNESS_CENTER","AIR_CONDITIONING","RESTAURANT","PARKING","PETS_ALLOWED",
	  "AIRPORT_SHUTTLE","BUSINESS_CENTER","DISABLED_FACILITIES","WIFI","MEETING_ROOMS","NO_KID_ALLOWED",
	  "TENNIS","GOLF","KITCHEN","ANIMAL_WATCHING","BABY-SITTING","BEACH","CASINO","JACUZZI","SAUNA","SOLARIUM",
	  "MASSAGE","VALET_PARKING","BAR or LOUNGE","KIDS_WELCOME","NO_PORN_FILMS","MINIBAR","TELEVISION",
	  "WI-FI_IN_ROOM","ROOM_SERVICE","GUARDED_PARKG","SERV_SPEC_MENU"
	};
	private CancellationTokenSource? _debounceCts;

	protected override void OnInitialized()
	{
		_ecList = new EditContext(_inputList);
		_ecSearch = new EditContext(_inputSearch);
	}

	private async Task SubmitAll()
	{
		if (_ecList!.Validate() && _ecSearch!.Validate())
		{
			(_hotelsList, _returnMessage) = await Service.SearchHotelsAsync(_inputList, _inputSearch);
		}
	}

	private async Task OnDestinationInput(ChangeEventArgs e)
	{
		_debounceCts?.Cancel();
		_debounceCts?.Dispose();
		_debounceCts = new CancellationTokenSource();
		_matchAlertMessage = "";
		_selectedDestination = "";

		if (e.Value is null)
		{
			return;
		}

		await Task.Delay(300, _debounceCts.Token);
		DestinationSuggestions = CityLookupService.Search(e.Value.ToString()).ToList();
	}

	private async Task OnAmenitiesInput(ChangeEventArgs e)
	{
		_debounceCts?.Cancel();
		_debounceCts?.Dispose();
		_debounceCts = new CancellationTokenSource();
		_amenitiesMessage = "";

		if (e.Value is null)
		{
			return;
		}

		await Task.Delay(300, _debounceCts.Token);
		AmenitiesSuggestions = AllAmenities.Where(a => a.StartsWith(e.Value.ToString().Trim(), StringComparison.OrdinalIgnoreCase))
							.Take(10).ToList();
	}

	private void HandleDestinationKeyPress(KeyboardEventArgs e)
	{
		if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_destination))
		{
			string trimmed = _destination.Trim();
			string? match = null;

			if (DestinationSuggestions.Any())
			{
				match = DestinationSuggestions.FirstOrDefault(d => d.Contains(trimmed, StringComparison.OrdinalIgnoreCase));
			}

			if (match != null)
			{
				(string CityCode, string AirportCode)? codes = CityLookupService.GetCodes(match);

				if (!_airport)
				{
					_inputList.CityOrAirportCode = codes.Value.CityCode;
				}
				else
				{
					_inputList.CityOrAirportCode = codes.Value.AirportCode;
				}

				_selectedDestination = $"{match}, Code: {_inputList.CityOrAirportCode}";

				_destination = match;
			}
			else
			{
				_matchAlertMessage = "No such match";
			}
			DestinationSuggestions.Clear();
		}
	}

	private void SelectDestination(string suggestion)
	{
		_destination = suggestion;
		(string CityCode, string AirportCode)? codes = CityLookupService.GetCodes(suggestion);

		if (!_airport)
		{
			_inputList.CityOrAirportCode = codes.Value.CityCode;
		}
		else
		{
			_inputList.CityOrAirportCode = codes.Value.AirportCode;
		}

		_selectedDestination = $"{suggestion}, Code: {_inputList.CityOrAirportCode}";
		DestinationSuggestions.Clear();
	}

	private void SelectAmenity(string suggestion)
	{
		_amenityInput = suggestion;
		if (_inputList.Amenities.Contains(_amenityInput))
		{
			_inputList.Amenities.Remove(_amenityInput);
		}
		else
		{
			_inputList.Amenities.Add(_amenityInput);
		}

		AmenitiesSuggestions.Clear();
	}

	private void HandleAmenityKeyPress(KeyboardEventArgs e)
	{
		if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_amenityInput))
		{
			string trimmed = _amenityInput.Trim();
			string? match = null;

			if (AmenitiesSuggestions.Any())
			{
				match = AmenitiesSuggestions.FirstOrDefault(a => a.Contains(trimmed, StringComparison.OrdinalIgnoreCase));
			}

			if (match != null)
			{
				if (_inputList.Amenities.Contains(match))
				{
					_inputList.Amenities.Remove(match);
				}
				else
				{
					_inputList.Amenities.Add(match);
				}

				_amenityInput = match;
			}
			else
			{
				_amenitiesMessage = "No such amenity";
			}
			AmenitiesSuggestions.Clear();
		}
	}

	private void ToggleRating(string starValue, object? isChecked)
	{

		if ((bool)isChecked!)
		{
			_inputList.Ratings.Add(starValue);
		}
		else
		{
			_inputList.Ratings.Remove(starValue);
		}
	}
}
