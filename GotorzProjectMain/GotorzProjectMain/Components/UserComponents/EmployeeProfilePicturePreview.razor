@inject ILogger<EmployeeProfilePicturePreview> Logger

<div class="mb-3">
	<label for="profile-picture" class="form-label">Profile Picture:</label>
	<InputFile id="profile-picture" OnChange="HandleProfilePictureUpload" class="form-control" />
	@if (ProfilePictureFile != null)
	{
		<p>New file selected: @ProfilePictureFile.Name</p>
	}
</div>

@if (_profilePicture is not null)
{
	<!-- Show preview if image is loaded -->
	<img src="@_profilePicture"
		 alt="Profile picture"
		 style="max-width:200px; max-height:200px;"
		 class="img-thumbnail" />
}

@code {
	public string? _profilePicture; // Base64 image data for preview

	[Parameter]
	public IBrowserFile? ProfilePictureFile { get; set; }

	[Parameter]
	public EventCallback<IBrowserFile?> ProfilePictureFileChanged { get; set; }

	private async Task HandleProfilePictureUpload(InputFileChangeEventArgs e)
	{
		try
		{
			if (e.File != null)
			{
				ProfilePictureFile = e.File;

				// Resize image to 200x200
				var thumb = await ProfilePictureFile
							.RequestImageFileAsync(ProfilePictureFile.ContentType, 200, 200);

				// Copy resized image to memory
				using var ms = new MemoryStream();
				await thumb.OpenReadStream().CopyToAsync(ms);

				// Convert to base64 string
				var base64 = Convert.ToBase64String(ms.ToArray());

				// Format as data URL for browser preview (html img tag)
				_profilePicture = $"data:{ProfilePictureFile.ContentType};base64,{base64}";
				
				// Notify parent of updated image file
				await ProfilePictureFileChanged.InvokeAsync(thumb);
			}
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, $"Failed to show new profile picture");
			throw;
		}
	}
}
