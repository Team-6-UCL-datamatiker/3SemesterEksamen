@inject ILogger<EmployeeProfilePicturePreview> Logger

<div class="mb-3">
	<label for="profile-picture" class="form-label">Profile Picture:</label>
	<InputFile id="profile-picture" OnChange="HandleProfilePictureUpload" class="form-control" />
	@if (ProfilePictureFile != null)
	{
		<p>New file selected: @ProfilePictureFile.Name</p>
	}
</div>

@if (_profilePicture is not null)
{
	<img src="@_profilePicture"
	alt="Profile picture"
	style="max-width:200px; max-height:200px;"
	class="img-thumbnail" />
}

@code {
	public string? _profilePicture;
	[Parameter]
	public IBrowserFile? ProfilePictureFile { get; set; }
	[Parameter]
	public EventCallback<IBrowserFile?> ProfilePictureFileChanged { get; set; }

	private async Task HandleProfilePictureUpload(InputFileChangeEventArgs e)
	{
		try
		{
			if (e.File != null)
			{
				ProfilePictureFile = e.File;

				// Ask the browser to shrink the image to 200x200
				var thumb = await ProfilePictureFile
							.RequestImageFileAsync(ProfilePictureFile.ContentType, 200, 200);

				// Creates a memory buffer to store the binary image data.
				using var ms = new MemoryStream();
				// Opens a stream from the thumb and copies its contents into the memory buffer.
				await thumb.OpenReadStream().CopyToAsync(ms);
				// Turns the bytes in memory into a base64-encoded string—basically a text version of the image.
				var base64 = Convert.ToBase64String(ms.ToArray());
				// Constructs the actual data URL that your <img src="..."> will use to show the preview.
				_profilePicture = $"data:{ProfilePictureFile.ContentType};base64,{base64}";
				// "Sends" image file back to parent for saving on the server.
				await ProfilePictureFileChanged.InvokeAsync(thumb);
			}
		}
		catch (Exception ex)
		{
			// This only logs to the browser because it's client side!!
			Logger.LogError(ex, $"Failed to show new profile picture");
			throw;
		}
	}
}
