@using GotorzProjectMain.Models
@using GotorzProjectMain.Models.DTOs
@using GotorzProjectMain.Services.API
@using GotorzProjectMain.Services.APIs

@inject IFlightService FlightService
@inject ICityLookupService CityLookupService

@rendermode InteractiveServer

@* Inputs *@
<div style="display:flex; gap:1rem; align-items:flex-start; margin-bottom:1rem; height:4rem">
    <div>
        <label for="fromCity">Depature City</label><br />
        <input id="fromCity"
               @bind="fromCity"
               placeholder="Type a city"
               autocomplete="off"
               @oninput="@(e => OnFromInput(e))"
               @onkeydown="HandleFromKeyPress"
               class="form-control" />
        @if (FromSuggestions.Any() && !string.IsNullOrWhiteSpace(fromCity))
        {
            <ul class="list-group position-absolute mt-1 w-100" style="z-index:1000;">
                @foreach (var suggestion in FromSuggestions)
                {
                    <li class="list-group-item list-group-item-action"
                        @onclick="() => SelectFrom(suggestion)">
                        @suggestion
                    </li>
                }
            </ul>
        }
    </div>

    <div>
        <label for="toCity">Arrival City</label><br />
        <input id="toCity"
               @bind="toCity"
               placeholder="Type a city"
               autocomplete="off"
               @oninput="@(e => OnToInput(e))"
               @onkeydown="HandleToKeyPress"
               class="form-control" />
        @if (ToSuggestions.Any() && !string.IsNullOrWhiteSpace(toCity))
        {
            <ul class="list-group position-absolute mt-1 w-100" style="z-index:1000;">
                @foreach (var suggestion in ToSuggestions)
                {
                    <li class="list-group-item list-group-item-action"
                        @onclick="() => SelectTo(suggestion)">
                        @suggestion
                    </li>
                }
            </ul>
        }
    </div>

    <div>
        <label for="outbound">Outbound Date</label><br />
        <input id="outbound"
               type="date"
               @bind="outbound"
               min="@DateTime.Today.ToString("yyyy-MM-dd")"
               style="padding:0.5rem; border:1px solid #ccc; border-radius:4px;" />
    </div>

    <div>
        <label for="adults">Adults</label><br />
        <input id="adults"
               type="number" min="1"
               @bind="adultCount"
               style="padding:0.5rem; border:1px solid #ccc; border-radius:4px; width:4rem;" />
    </div>

    <div>
        <label for="children">Children</label><br />
        <input id="children"
               type="number" min="0"
               @bind="childCount"
               style="padding:0.5rem; border:1px solid #ccc; border-radius:4px; width:4rem;" />
    </div>
    <div>
        <label /><br />
        <button @onclick="Search" class="btn btn-primary" style="padding: 0.4rem 1rem; padding-top: 0.6rem">Search</button>

    </div>

</div>

@* Error message *@
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-warning">
        @ErrorMessage
    </div>
}

@if (FlightRoutes != null)
{
    <div style="display: flex; flex-direction: column;">
        @for (int i = 0; i < FlightRoutes.Count; i++)
        {
            var route = FlightRoutes[i];
            var routeSummary = string.Join(" → ",
            route.Legs.Select(s => s.DepartureAirportCode)
            .Concat(new[] { route.Legs.Last().ArrivalAirportCode }));

            <details class="details-row">
                <summary>
                    <span>@routeSummary</span>
                    <span>@route.Legs.Count legs</span>
                    <span>@route.TotalPrice DKK</span>
                </summary>
                <br />
                <div style="padding: 1rem; background: #fff; border-radius: 6px; border: 1px solid #ccc">

                    

                    @for (int j = 0; j < route.Legs.Count; j++)
                    {
                        var leg = route.Legs[j];
                        <div style="margin-bottom: 0.5rem; padding-bottom: 0.5rem;">
                            <div><strong>Route:</strong> @leg.DepartureAirportCode → @leg.ArrivalAirportCode</div>
                            <div><strong>Departure:</strong> @leg.DepartureTime.ToString("dd/MM/yyyy HH:mm")</div>
                            <div><strong>Arrival:</strong> @leg.ArrivalTime.ToString("dd/MM/yyyy HH:mm")</div>
                            <div><strong>Airline:</strong> @leg.Airline</div>
                        </div>


                        @if (j < route.Layovers.Count)
                        {
                            var layover = route.Layovers[j];
                            <div style="margin-bottom: 1rem; background: #f0f0f0; padding: 0.5rem; border-left: 4px solid #ccc;">
                                <strong>Layover at @layover.Name:</strong> @layover.DurationDisplay
                            </div>
                        }

                    }
                    

                    <div style="margin-top: 0.5rem; border-top: 1px solid #ddd; padding-top: 1rem;">
                        <div><strong>Total duration:</strong> @route.TotalTravelTimeDisplay</div>
                        <div><strong>Total price:</strong> @route.TotalPrice DKK</div>
                    </div>
                    <br/>
                    <button @onclick="() => SelectFlight(route)"
                            class="btn @(selectedFlightRoute == route ? "btn-success" : "btn-outline-primary")"
                            style="margin-bottom: 0.5rem;">
                        @(selectedFlightRoute == route ? "Selected" : "Select this flight")
                    </button>

                </div>
            </details>
        }
    </div>
}




@code {

    [Parameter]
    public string ComponentId { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public EventCallback<(string ComponentId, FlightRoute Route)> OnFlightSelected { get; set; }


    private string fromCity = "Copenhagen (CPH)";
    private string toCity = "London, Heathrow (LHR)";

    // Autocompletion
    private List<string> FromSuggestions = new();
    private List<string> ToSuggestions = new();
    private CancellationTokenSource? _debounceCts;


    private DateTime outbound = DateTime.Today.AddDays(7);
    private int adultCount = 1;
    private int childCount = 0;

    private List<FlightRoute>? FlightRoutes;
    private string? ErrorMessage;

    // cant bind <select> to object, so we use an index
    private int? selectedFlightRouteIndex;

    private FlightRoute? selectedFlightRoute;


    // Selected flight route based on the index
    public FlightRoute? SelectedFlightRoute =>
        selectedFlightRouteIndex.HasValue
                ? FlightRoutes[selectedFlightRouteIndex.Value]
                : null;


    // Performs a flight search using city names
    async Task Search()
    {
        // Reset state before search
        ErrorMessage = null;
        FlightRoutes = null;
        selectedFlightRouteIndex = null; // Reset selection on each new search

        if (outbound == DateTime.MinValue)
        {
            ErrorMessage = "Please select a valid outbound date.";
            return;
        }

		// Lookup airport codes for the given cities
        var fromMatch = CityLookupService.GetCodes(fromCity);
        if (fromMatch == null)
        {
            ErrorMessage = $"Depature “{fromCity}” not found.";
            return;
        }

        var toMatch = CityLookupService.GetCodes(toCity);
        if (toMatch == null)
        {
            ErrorMessage = $"Destination “{toCity}” not found.";
            return;
        }


        // CityLookupService.GetCodes returns (CityCode, AirportCode)
        string fromAirportCode = fromMatch.Value.AirportCode;
        string toAirportCode = toMatch.Value.AirportCode;

        // Request flight offers from the external API
        FlightRoutes = await FlightService.SearchAsync(
            fromAirportCode,
            toAirportCode,
            outbound,
            adultCount,
            childCount);

        // Post-search, empty result
        if (!FlightRoutes.Any())
        {
            ErrorMessage = "No flights found. Either you picked an unsupported code " +
                           "(eg “London (LON)”) or there simply aren’t any offers " +
                           "for that date and passenger count. Please try one of the suggestions above.";
        }
    }

    private async Task SelectFlight(FlightRoute route)
    {
        selectedFlightRoute = route;
        Console.WriteLine($"Selected route: {route.TotalPrice} DKK in component {ComponentId}");
        await OnFlightSelected.InvokeAsync((ComponentId, route));
    }


	// Autocompletion for departure city
    private async Task OnFromInput(ChangeEventArgs e)
    {
        _debounceCts?.Cancel();
        _debounceCts = new CancellationTokenSource();
        fromCity = e?.Value?.ToString() ?? "";
        await Task.Delay(300, _debounceCts.Token);
        FromSuggestions = CityLookupService.SearchContains(fromCity).ToList();
    }
	// Handle key press for departure city
    private void HandleFromKeyPress(KeyboardEventArgs e)
    {
        if (e.Key != "Enter") return;
        if (FromSuggestions.Any())
            SelectFrom(FromSuggestions.First());
    }
	// Select a city from the suggestions
    private void SelectFrom(string city)
    {
        fromCity = city;
        FromSuggestions.Clear();
    }
	// Autocompletion for arrival city
    private async Task OnToInput(ChangeEventArgs e)
    {
        _debounceCts?.Cancel();
        _debounceCts = new CancellationTokenSource();
        toCity = e?.Value?.ToString() ?? "";
        await Task.Delay(300, _debounceCts.Token);
        ToSuggestions = CityLookupService.SearchContains(toCity).ToList();
    }
	// Handle key press for arrival city
    private void HandleToKeyPress(KeyboardEventArgs e)
    {
        if (e.Key != "Enter") return;
        if (ToSuggestions.Any())
            SelectTo(ToSuggestions.First());
    }
	// Select a city from the suggestions
    private void SelectTo(string city)
    {
        toCity = city;
        ToSuggestions.Clear();
    }

}
