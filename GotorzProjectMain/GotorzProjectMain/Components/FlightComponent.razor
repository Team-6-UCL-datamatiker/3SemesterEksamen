@using GotorzProjectMain.Models
@using GotorzProjectMain.Models.DTOs
@using GotorzProjectMain.Services.API

@inject IFlightService FlightService

@rendermode InteractiveServer

@* Inputs *@
<div style="display:flex; gap:1rem; align-items:flex-start; margin-bottom:1rem; height:4rem">
    <div>
        <label for="fromCity">Depature City</label><br />
        <input id="fromCity"
               @bind="fromCity"
               placeholder="Type a city"
               style="padding:0.5rem; border:1px solid #ccc; border-radius:4px;" />
    </div>

    <div>
        <label for="toCity">Arrival City</label><br />
        <input id="toCity"
               @bind="toCity"
               placeholder="Type a city"
               style="padding:0.5rem; border:1px solid #ccc; border-radius:4px;" />
    </div>

    <div>
        <label for="outbound">Outbound Date</label><br />
        <input id="outbound"
               type="date"
               @bind="outbound"
               min="@DateTime.Today.ToString("yyyy-MM-dd")"
               style="padding:0.5rem; border:1px solid #ccc; border-radius:4px;" />
    </div>

    <div>
        <label for="adults">Adults</label><br />
        <input id="adults"
               type="number" min="1"
               @bind="adultCount"
               style="padding:0.5rem; border:1px solid #ccc; border-radius:4px; width:4rem;" />
    </div>

    <div>
        <label for="children">Children</label><br />
        <input id="children"
               type="number" min="0"
               @bind="childCount"
               style="padding:0.5rem; border:1px solid #ccc; border-radius:4px; width:4rem;" />
    </div>
    <div>
        <label /><br />
        <button @onclick="Search" class="btn btn-primary" style="padding: 0.4rem 1rem; padding-top: 0.6rem">Search</button>

    </div>

</div>

@if (FlightRoutes != null)
{
    <div style="display: flex; flex-direction: column;">
        @for (int i = 0; i < FlightRoutes.Count; i++)
        {
            var route = FlightRoutes[i];
            var routeSummary = string.Join(" → ",
            route.Legs.Select(s => s.DepartureAirportCode)
            .Concat(new[] { route.Legs.Last().ArrivalAirportCode }));

            <details class="details-row">
                <summary>
                    <span>@routeSummary</span>
                    <span>@route.Legs.Count legs</span>
                    <span>@route.TotalPrice DKK</span>
                </summary>
                <br />
                <div style="padding: 1rem; background: #fff; border-radius: 6px; border: 1px solid #ccc">

                    

                    @for (int j = 0; j < route.Legs.Count; j++)
                    {
                        var leg = route.Legs[j];
                        <div style="margin-bottom: 0.5rem; padding-bottom: 0.5rem;">
                            <div><strong>Route:</strong> @leg.DepartureAirportCode → @leg.ArrivalAirportCode</div>
                            <div><strong>Departure:</strong> @leg.DepartureTime.ToString("dd/MM/yyyy HH:mm")</div>
                            <div><strong>Arrival:</strong> @leg.ArrivalTime.ToString("dd/MM/yyyy HH:mm")</div>
                            <div><strong>Airline:</strong> @leg.Airline</div>
                        </div>


                        @if (j < route.Layovers.Count)
                        {
                            var layover = route.Layovers[j];
                            <div style="margin-bottom: 1rem; background: #f0f0f0; padding: 0.5rem; border-left: 4px solid #ccc;">
                                <strong>Layover at @layover.Name:</strong> @layover.DurationDisplay
                            </div>
                        }

                    }
                    

                    <div style="margin-top: 0.5rem; border-top: 1px solid #ddd; padding-top: 1rem;">
                        <div><strong>Total duration:</strong> @route.TotalTravelTimeDisplay</div>
                        <div><strong>Total price:</strong> @route.TotalPrice DKK</div>
                    </div>
                    <br/>
                    <button @onclick="() => SelectFlight(route)"
                            class="btn @(selectedFlightRoute == route ? "btn-success" : "btn-outline-primary")"
                            style="margin-bottom: 0.5rem;">
                        @(selectedFlightRoute == route ? "Selected" : "Select this flight")
                    </button>

                </div>
            </details>
        }
    </div>
}




@code {

    [Parameter]
    public string ComponentId { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public EventCallback<(string ComponentId, FlightRoute Route)> OnFlightSelected { get; set; }


    private string fromCity = "Copenhagen";
    private string toCity = "London";
    private DateTime outbound = DateTime.Today.AddDays(7);
    private int adultCount = 1;
    private int childCount = 0;

    private List<FlightRoute>? FlightRoutes;
    private string? ErrorMessage;

    // cant bind <select> to object, so we use an index
    private int? selectedFlightRouteIndex;

    private FlightRoute? selectedFlightRoute;


    // Selected flight route based on the index
    public FlightRoute? SelectedFlightRoute =>
        selectedFlightRouteIndex.HasValue
                ? FlightRoutes[selectedFlightRouteIndex.Value]
                : null;


    // Performs a flight search using city names
    async Task Search()
    {
        // Reset state before search
        ErrorMessage = null;
        FlightRoutes = null;
        selectedFlightRouteIndex = null; // Reset selection on each new search

        if (outbound == DateTime.MinValue)
        {
            ErrorMessage = "Please select a valid outbound date.";
            return;
        }

        // Look up airport codes based on user input
        if (!CityAirportMap.Map.TryGetValue(fromCity, out string[] fromAirports)) //if it gets a match, it saves it to fromAirports else set errormessage
        {
            ErrorMessage = $"Origin city “{fromCity}” is not supported.";
            return;
        }
        if (!CityAirportMap.Map.TryGetValue(toCity, out string[] toAirports)) //if it gets a match, it saves it to toAirports else set errormessage
        {
            ErrorMessage = $"Destination city “{toCity}” is not supported.";
            return;
        }


        // Pass comma-separated Airport codes to the API
        string fromAirportsString = string.Join(",", fromAirports);
        string toAirportsString = string.Join(",", toAirports);

        // Request flight offers from the external API
        FlightRoutes = await FlightService.SearchAsync(
            fromAirportsString,
            toAirportsString,
            outbound,
            adultCount,
            childCount);
    }

    private async Task SelectFlight(FlightRoute route)
    {
        selectedFlightRoute = route;
        Console.WriteLine($"Selected route: {route.TotalPrice} DKK in component {ComponentId}");
        await OnFlightSelected.InvokeAsync((ComponentId, route));
    }





}
